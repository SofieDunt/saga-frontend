{"version":3,"sources":["client/types.ts","client/client.ts","components/choiceCard/index.tsx","themes.ts","forms/exportForm/index.tsx","forms/importForm/index.tsx","components/modal/index.tsx","components/boxCard/index.tsx","components/softButton/index.tsx","pages/player/index.tsx","components/navLink/index.tsx","components/navBar/index.tsx","components/linkButton/index.tsx","pages/home/index.tsx","components/alert/index.tsx","forms/startWorkForm/index.tsx","forms/renameWorkForm/index.tsx","pages/writer/index.tsx","components/decisionDescription/index.tsx","components/optionCard/index.tsx","components/simpleDecisionInputs/index.tsx","forms/addSimpleDecisionForm/index.tsx","forms/utils.ts","components/consequenceInput/index.tsx","forms/addConsequentialDecisionForm/index.tsx","components/dependentDecisionInputs/index.tsx","forms/addSimpleDependentDecisionForm/index.tsx","forms/addConsequentialDependentDecisionForm/index.tsx","pages/workEditor/index.tsx","forms/titleForm/index.tsx","forms/addStatusForm/index.tsx","components/statusCard/index.tsx","forms/setInitialChoiceForm/index.tsx","App.tsx","pages/storyPlayer/index.tsx","reportWebVitals.ts","index.tsx"],"names":["ApplicationTypes","DecisionTypes","StatusUpdateTypes","SwitchFormTypes","loadedPlayerName","loadedEditorName","allPlayerNames","allEditorNames","defaultStory","name","statuses","value","choices","id","options","decision","decisions","type","SIMPLE","description","threshold","outcome1Id","outcome2Id","choice","loadedPlayerStory","loadedEditorStory","importFromPath","a","Promise","reject","message","quit","resolve","Client","getCurrentStoryName","getCurrentChoice","getCurrentStory","loaded","getAllStoryNames","exportStory","path","exportStoryInProgress","importStory","next","choose","loadStory","restart","quitStory","removeStory","splice","indexOf","getAllWorkNames","getCurrentWorkName","getCurrentWork","getCurrentWorkStoryName","getCurrentStatuses","getInitialChoice","getCurrentChoices","getCurrentDecisions","exportWork","importWork","exportToPlayer","loadWork","quitWork","removeWork","renameWork","newName","startNewWork","setName","length","addStatus","val","res","existed","status","push","removeStatus","addChoice","setInitial","addSimpleDecision","addConsequentialDecision","addSimpleDependent","addConsequentialDependent","removeOption","option","removeChoice","PRIMARY","SECONDARY","TERTIARY","WARN","WHITE","BLACK","SOFT_BLACK","ACTION_BUTTON_MARGIN","FooterPageContainer","styled","div","PageContainer","BlackPageContainer","StoryTitle","Text","InlineText","StrongText","Header","ButtonLabel","FormContainer","TitleBox","Box","EmptyLibrary","MidFlexElement","EndFlexElement","BottomFlex","Flex","BottomCornerFlex","PrimaryButton","Button","SecondaryButton","ExportForm","onSuccess","exportType","useState","errorVisible","setErrorVisible","errorMessage","setErrorMessage","setPath","exportOriginal","setExportOriginal","STORY","useEffect","handleError","err","showError","mb","defaultValue","placeholder","onChange","e","target","prev","bg","onClick","then","color","ImportForm","importType","importPath","setImportPath","promise","WORK","CloseBackground","ViewWindow","CloseButton","ButtonText","Modal","visible","onClose","children","StoryCard","props","minWidth","CardHeader","BoxCard","title","SoftButton","text","margin","Player","library","setLibrary","manageLibrary","setManageLibrary","exportVisible","setExportVisible","exportName","setExportName","importVisible","setImportVisible","history","useHistory","window","alert","updateLibrary","errorAlert","flexWrap","map","Routes","PLAYER_PLAY","mr","triggerAlert","padding","triggerMessage","LinkText","NavLink","href","rest","NavFlex","NavBar","HOME","fontSize","mx","marginRight","PLAYER_LIBRARY","WRITER_LIBRARY","LinkButton","to","HomePageContainer","GreetingDescription","Italic","ButtonFlex","Spacer","SmallSpacer","Home","width","Banner","Alert","warn","my","DEFAULT_NAME","StartWorkForm","RenameWorkForm","currentName","setNewName","Writer","renameVisible","setRenameVisible","startVisible","setStartVisible","catch","onRenameSuccess","WRITER_EDIT","DecisionDescription","toString","DEPENDENT","dependency","consequences","cons","i","ADD","var","SET","OptionCard","mt","SimpleDecisionInputs","onDescriptionChange","onOutcomeIdChange","alignItems","Number","currentTarget","AddSimpleDecisionForm","choiceId","setDescription","outcomeId","setOutcomeId","feedback","setFeedback","showFeedback","setShowFeedback","triggerFeedback","msg","validateInteger","onInvalid","onValid","targetValue","includes","ConsequenceInput","setType","setVal","showIntegerError","giveFeedback","changeVal","hideFeedback","AddConsequentialDecisionForm","setConsequences","currentConsequence","setCurrentConsequence","feedbackHandler","str","undefined","DependentDecisionInputs","onDependencyChange","onThresholdChange","onOutcomeBelowIdChange","onOutcomeMeetsIdChange","changeThreshold","AddSimpleDependentDecisionForm","setDependency","setThreshold","outcomeBelowId","setOutcomeBelowId","outcomeMeetsId","setOutcomeMeetsId","AddConsequentialDependentDecisionForm","ChoiceCard","editing","setEditing","hasOptions","NONE","currentForm","setCurrentForm","onFormSuccess","textAlign","ADD_SIMPLE","ADD_CONSEQUENTIAL","ADD_SIMPLE_DEPENDENT","ADD_CONSEQUENTIAL_DEPENDENT","InlineSoftButton","TitleForm","onFinish","titleRequest","setTitleRequest","display","ml","AddStatusForm","updateName","StatusCard","updateStory","SetInitialChoiceForm","setChoice","noStory","WorkEditor","workName","setWorkName","work","setWork","noWorkMessage","setNoWorkMessage","handleQuit","addEventListener","removeEventListener","updateStatuses","updateInitialChoice","updateChoicesAndDecisions","dRes","onAddChoice","ADD_STATUS","SET_INITIAL","ScriptText","DecisionText","StoryPlayer","story","setStory","prevChoices","setPrevChoices","prevDecisions","setPrevDecisions","noStoryMessage","setNoStoryMessage","getCurrentDescription","storyOptions","opt","Top","ghPagesDisclaimer","App","alerts","setAlerts","deleteAlert","copyAlerts","basename","process","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.544ae9eb.chunk.js","sourcesContent":["export interface ErrorResponse {\n  readonly message: string;\n}\n\nexport enum ApplicationTypes {\n  STORY,\n  WORK,\n}\n\nexport interface ApiClient {\n  readonly getCurrentStoryName: () => Promise<string>;\n  readonly getCurrentChoice: () => Promise<string>;\n  readonly getCurrentStory: () => Promise<Story>;\n  readonly getAllStoryNames: () => Promise<string[]>;\n  readonly exportStory: (path: string, name: string) => Promise<void>;\n  readonly exportStoryInProgress: (path: string, name: string) => Promise<void>;\n  readonly importStory: (path: string) => Promise<void>;\n  readonly next: () => Promise<void>;\n  readonly choose: (decision: number) => Promise<void>;\n  readonly loadStory: (name: string) => Promise<void>;\n  readonly restart: () => Promise<void>;\n  readonly quitStory: () => Promise<void>;\n  readonly removeStory: (name: string) => Promise<void>;\n  readonly getAllWorkNames: () => Promise<string[]>;\n  readonly getCurrentWorkName: () => Promise<string>;\n  readonly getCurrentWork: () => Promise<Story>;\n  readonly getCurrentWorkStoryName: () => Promise<string>;\n  readonly getCurrentStatuses: () => Promise<StoryStatus[]>;\n  readonly getInitialChoice: () => Promise<number>;\n  readonly getCurrentChoices: () => Promise<Choice[]>;\n  readonly getCurrentDecisions: () => Promise<Decision[]>;\n  readonly exportWork: (path: string) => Promise<void>;\n  readonly importWork: (path: string) => Promise<void>;\n  readonly exportToPlayer: () => Promise<void>;\n  readonly loadWork: (name: string) => Promise<void>;\n  readonly quitWork: () => Promise<void>;\n  readonly removeWork: (name: string) => Promise<void>;\n  readonly renameWork: (name: string, newName: string) => Promise<void>;\n  readonly startNewWork: (name: string) => Promise<void>;\n  readonly setName: (name: string) => Promise<void>;\n  readonly addStatus: (name: string, val: number) => Promise<void>;\n  readonly removeStatus: (name: string) => Promise<void>;\n  readonly addChoice: () => Promise<void>;\n  readonly setInitial: (choice: number) => Promise<void>;\n  readonly addSimpleDecision: (\n    decision: AddSimpleDecisionRequest\n  ) => Promise<void>;\n  readonly addConsequentialDecision: (\n    decision: AddConsequentialDecisionRequest\n  ) => Promise<void>;\n  readonly addSimpleDependent: (\n    decision: AddSimpleDependentRequest\n  ) => Promise<void>;\n  readonly addConsequentialDependent: (\n    decision: AddConsequentialDependentRequest\n  ) => Promise<void>;\n  readonly removeOption: (choice: number, option: number) => Promise<void>;\n  readonly removeChoice: (choice: number) => Promise<void>;\n}\n\nexport interface Story {\n  readonly name: string;\n  readonly statuses: StoryStatus[];\n  readonly choices: Choice[];\n  readonly decisions: Decision[];\n  readonly choice: number;\n}\n\nexport interface StoryStatus {\n  readonly name: string;\n  readonly value: number;\n}\n\nexport interface Choice {\n  readonly id: number;\n  readonly options: Option[];\n}\n\nexport interface Option {\n  readonly id: number;\n  readonly decision: number;\n}\n\nexport interface Decision {\n  readonly id: number;\n  readonly type: DecisionTypes;\n  readonly description: string;\n  readonly dependency?: string;\n  readonly threshold: number;\n  readonly outcome1Id: number;\n  readonly outcome2Id: number;\n  readonly consequences?: StatusUpdate[];\n}\n\nexport interface StatusUpdate {\n  readonly type: StatusUpdateTypes;\n  readonly var: number;\n  readonly status: string;\n}\n\nexport enum DecisionTypes {\n  SIMPLE = \"SIMPLE\",\n  CONSEQUENTIAL = \"CONSEQUENTIAL\",\n  DEPENDENT = \"DEPENDENT\",\n}\n\nexport enum StatusUpdateTypes {\n  ADD = \"ADD\",\n  SET = \"SET\",\n}\n\nexport interface AddSimpleDecisionRequest {\n  readonly description: string;\n  readonly choiceId: number;\n  readonly outcomeId: number;\n}\n\nexport interface AddConsequentialDecisionRequest\n  extends AddSimpleDecisionRequest {\n  readonly consequences: string[];\n}\n\nexport interface AddSimpleDependentRequest {\n  readonly description: string;\n  readonly choiceId: number;\n  readonly dependency: string;\n  readonly threshold: number;\n  readonly outcomeBelowId: number;\n  readonly outcomeMeetsId: number;\n}\n\nexport interface AddConsequentialDependentRequest\n  extends AddSimpleDependentRequest {\n  readonly consequences: string[];\n}\n","import {\n  AddConsequentialDecisionRequest,\n  AddConsequentialDependentRequest,\n  AddSimpleDecisionRequest,\n  AddSimpleDependentRequest,\n  ApiClient,\n  Choice,\n  Decision,\n  DecisionTypes,\n  Story,\n  StoryStatus,\n} from \"./types\";\n\nlet loadedPlayerName: string = \"\";\nlet loadedEditorName: string = \"\";\nconst allPlayerNames: string[] = [\n  \"A Magical Adventure\",\n  \"A Sci-Fi Adventure\",\n  \"A Nonfiction Adventure\",\n];\nconst allEditorNames: string[] = [\n  \"A Magical Adventure\",\n  \"A Sci-Fi Adventure\",\n  \"A Nonfiction Adventure\",\n];\n\nconst defaultStory: Story = {\n  name: \"\",\n  statuses: [\n    {\n      name: \"points\",\n      value: 0,\n    },\n  ],\n  choices: [\n    {\n      id: 0,\n      options: [\n        {\n          id: 0,\n          decision: 0,\n        },\n      ],\n    },\n    {\n      id: 1,\n      options: [\n        {\n          id: 0,\n          decision: 1,\n        },\n        {\n          id: 1,\n          decision: 2,\n        },\n        {\n          id: 2,\n          decision: 3,\n        },\n      ],\n    },\n    {\n      id: 2,\n      options: [\n        {\n          id: 0,\n          decision: 4,\n        },\n      ],\n    },\n    {\n      id: 3,\n      options: [],\n    },\n  ],\n  decisions: [\n    {\n      id: 0,\n      type: DecisionTypes.SIMPLE,\n      description: \"Next\",\n      threshold: 0,\n      outcome1Id: 1,\n      outcome2Id: 0,\n    },\n    {\n      id: 1,\n      type: DecisionTypes.SIMPLE,\n      description: \"Iceland\",\n      threshold: 0,\n      outcome1Id: 2,\n      outcome2Id: 0,\n    },\n    {\n      id: 2,\n      type: DecisionTypes.SIMPLE,\n      description: \"Venice\",\n      threshold: 0,\n      outcome1Id: 2,\n      outcome2Id: 0,\n    },\n    {\n      id: 3,\n      type: DecisionTypes.SIMPLE,\n      description: \"Disneyland\",\n      threshold: 0,\n      outcome1Id: 2,\n      outcome2Id: 0,\n    },\n    {\n      id: 4,\n      type: DecisionTypes.SIMPLE,\n      description: \"Next\",\n      threshold: 0,\n      outcome1Id: 3,\n      outcome2Id: 0,\n    },\n  ],\n  choice: 0,\n};\n\nlet loadedPlayerStory: Story = defaultStory;\nlet loadedEditorStory: Story = defaultStory;\n\nconst importFromPath = async (): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst quit = (): Promise<void> => {\n  loadedEditorName = \"\";\n  return Promise.resolve();\n};\n\n// PLAYER\n\nconst getCurrentStoryName = (): Promise<string> => {\n  return Promise.resolve(loadedPlayerName);\n};\n\nconst getCurrentChoice = (): Promise<string> => {\n  let description = \"\";\n\n  switch (loadedPlayerStory.choice) {\n    case 0:\n      description =\n        \"This is a sample interactive story demo! Here you can see how players read their options and make decisions.\";\n      break;\n    case 1:\n      description = \"Try making a decision! Where will you go for vacation?\";\n      break;\n    case 2:\n      description = \"Nice decision! That's all for this demo!\";\n      break;\n    case 3:\n      description = \"Game over, no choices left.\";\n      break;\n  }\n\n  return Promise.resolve(description);\n};\n\nconst getCurrentStory = (): Promise<Story> => {\n  const loaded: Story = {\n    name: loadedPlayerName,\n    statuses: loadedPlayerStory.statuses,\n    choices: loadedPlayerStory.choices,\n    decisions: loadedPlayerStory.decisions,\n    choice: loadedPlayerStory.choice,\n  };\n  return Promise.resolve(loaded);\n};\n\nconst getAllStoryNames = (): Promise<string[]> => {\n  return Promise.resolve(allPlayerNames);\n};\n\nconst exportStory = (path: string, name: string): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst exportStoryInProgress = (path: string, name: string): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst importStory = (path: string): Promise<void> => {\n  return importFromPath();\n};\n\nconst next = (): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst choose = (decision: number): Promise<void> => {\n  loadedPlayerStory = {\n    name: loadedPlayerStory.name,\n    statuses: loadedPlayerStory.statuses,\n    choices: loadedPlayerStory.choices,\n    decisions: loadedPlayerStory.decisions,\n    choice: loadedPlayerStory.decisions[decision].outcome1Id,\n  };\n  return Promise.resolve();\n};\n\nconst loadStory = (name: string): Promise<void> => {\n  loadedPlayerName = name;\n  return Promise.resolve();\n};\n\nconst restart = (): Promise<void> => {\n  loadedPlayerStory = defaultStory;\n  return Promise.resolve();\n};\n\nconst quitStory = (): Promise<void> => {\n  return quit();\n};\n\nconst removeStory = (name: string): Promise<void> => {\n  allPlayerNames.splice(allPlayerNames.indexOf(name), 1);\n  return Promise.resolve();\n};\n\n// WRITER\n\nconst getAllWorkNames = (): Promise<string[]> => {\n  return Promise.resolve(allEditorNames);\n};\n\nconst getCurrentWorkName = (): Promise<string> => {\n  return Promise.resolve(loadedEditorName);\n};\n\nconst getCurrentWork = (): Promise<Story> => {\n  const loaded: Story = {\n    name: loadedEditorName,\n    statuses: loadedEditorStory.statuses,\n    choices: loadedEditorStory.choices,\n    decisions: loadedEditorStory.decisions,\n    choice: loadedEditorStory.choice,\n  };\n\n  return Promise.resolve(loaded);\n};\n\nconst getCurrentWorkStoryName = (): Promise<string> => {\n  if (loadedEditorName !== \"\") {\n    return Promise.resolve(loadedEditorStory.name);\n  } else {\n    return Promise.reject({ message: \"No loaded story.\" });\n  }\n};\n\nconst getCurrentStatuses = (): Promise<StoryStatus[]> => {\n  if (loadedEditorName !== \"\") {\n    return Promise.resolve(loadedEditorStory.statuses);\n  } else {\n    return Promise.reject({ message: \"No loaded story.\" });\n  }\n};\n\nconst getInitialChoice = (): Promise<number> => {\n  if (loadedEditorName !== \"\") {\n    return Promise.resolve(loadedEditorStory.choice);\n  } else {\n    return Promise.reject({ message: \"No loaded story.\" });\n  }\n};\n\nconst getCurrentChoices = (): Promise<Choice[]> => {\n  if (loadedEditorName !== \"\") {\n    return Promise.resolve(loadedEditorStory.choices);\n  } else {\n    return Promise.reject({ message: \"No loaded story.\" });\n  }\n};\n\nconst getCurrentDecisions = (): Promise<Decision[]> => {\n  if (loadedEditorName !== \"\") {\n    return Promise.resolve(loadedEditorStory.decisions);\n  } else {\n    return Promise.reject({ message: \"No loaded story.\" });\n  }\n};\n\nconst exportWork = (path: string): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst importWork = (path: string): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst exportToPlayer = (): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst loadWork = (name: string): Promise<void> => {\n  loadedEditorName = name;\n  return Promise.resolve();\n};\n\nconst quitWork = (): Promise<void> => {\n  return quit();\n};\n\nconst removeWork = (name: string): Promise<void> => {\n  allEditorNames.splice(allEditorNames.indexOf(name), 1);\n  return Promise.resolve();\n};\n\nconst renameWork = (name: string, newName: string): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst startNewWork = (name: string): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst setName = (name: string): Promise<void> => {\n  if (name.length < 1) {\n    return Promise.resolve();\n  }\n\n  loadedEditorName = name;\n  loadedEditorStory = {\n    name: name,\n    statuses: loadedEditorStory.statuses,\n    choices: loadedEditorStory.choices,\n    decisions: loadedEditorStory.decisions,\n    choice: loadedEditorStory.choice,\n  };\n  return Promise.resolve();\n};\n\nconst addStatus = (name: string, val: number): Promise<void> => {\n  let res = [];\n  let existed = false;\n  for (let status of loadedEditorStory.statuses) {\n    if (status.name === name) {\n      res.push({ name, value: val });\n      existed = true;\n    } else {\n      res.push(status);\n    }\n  }\n  if (existed) {\n    loadedEditorStory = {\n      name: loadedEditorStory.name,\n      statuses: res,\n      choices: loadedEditorStory.choices,\n      decisions: loadedEditorStory.decisions,\n      choice: loadedEditorStory.choice,\n    };\n    return Promise.resolve();\n  } else {\n    loadedEditorStory = {\n      name: loadedEditorStory.name,\n      statuses: [...loadedEditorStory.statuses, { name, value: val }],\n      choices: loadedEditorStory.choices,\n      decisions: loadedEditorStory.decisions,\n      choice: loadedEditorStory.choice,\n    };\n    return Promise.resolve();\n  }\n};\n\nconst removeStatus = (name: string): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst addChoice = (): Promise<void> => {\n  loadedEditorStory = {\n    name: loadedEditorStory.name,\n    statuses: loadedEditorStory.statuses,\n    choices: [\n      ...loadedEditorStory.choices,\n      { id: loadedEditorStory.choices.length, options: [] },\n    ],\n    decisions: loadedEditorStory.decisions,\n    choice: loadedEditorStory.choice,\n  };\n  return Promise.resolve();\n};\n\nconst setInitial = (choice: number): Promise<void> => {\n  loadedEditorStory = {\n    name: loadedEditorStory.name,\n    statuses: loadedEditorStory.statuses,\n    choices: [\n      ...loadedEditorStory.choices,\n      { id: loadedEditorStory.choices.length, options: [] },\n    ],\n    decisions: loadedEditorStory.decisions,\n    choice: choice,\n  };\n  return Promise.resolve();\n};\n\nconst addSimpleDecision = (\n  decision: AddSimpleDecisionRequest\n): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst addConsequentialDecision = (\n  decision: AddConsequentialDecisionRequest\n): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst addSimpleDependent = (\n  decision: AddSimpleDependentRequest\n): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst addConsequentialDependent = (\n  decision: AddConsequentialDependentRequest\n): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst removeOption = (choice: number, option: number): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst removeChoice = (choice: number): Promise<void> => {\n  return Promise.reject({ message: \"This is not supported in the demo.\" });\n};\n\nconst Client: ApiClient = {\n  getCurrentStoryName,\n  getCurrentChoice,\n  getCurrentStory,\n  getAllStoryNames,\n  exportStory,\n  exportStoryInProgress,\n  importStory,\n  next,\n  choose,\n  loadStory,\n  restart,\n  quitStory,\n  removeStory,\n  getAllWorkNames,\n  getCurrentWorkName,\n  getCurrentWork,\n  getCurrentWorkStoryName,\n  getCurrentStatuses,\n  getInitialChoice,\n  getCurrentChoices,\n  getCurrentDecisions,\n  exportWork,\n  importWork,\n  exportToPlayer,\n  loadWork,\n  quitWork,\n  removeWork,\n  renameWork,\n  startNewWork,\n  setName,\n  addStatus,\n  removeStatus,\n  addChoice,\n  setInitial,\n  addSimpleDecision,\n  addConsequentialDecision,\n  addSimpleDependent,\n  addConsequentialDependent,\n  removeOption,\n  removeChoice,\n};\n\nexport default Client;\n","import React, { useState } from \"react\";\nimport { Choice, Decision, StoryStatus } from \"../../client/types\";\nimport { Box, Button, Flex, Text } from \"rebass\";\nimport BoxCard from \"../boxCard\";\nimport SoftButton from \"../softButton\";\nimport { Messenger } from \"../../App\";\nimport Client from \"../../client/client\";\nimport { ACTION_BUTTON_MARGIN, WARN } from \"../../themes\";\nimport Modal from \"../modal\";\nimport { FormContainer, Header, StrongText } from \"../../themes\";\nimport OptionCard from \"../optionCard\";\nimport AddSimpleDecisionForm from \"../../forms/addSimpleDecisionForm\";\nimport AddConsequentialDecisionForm from \"../../forms/addConsequentialDecisionForm\";\nimport AddSimpleDependentDecisionForm from \"../../forms/addSimpleDependentDecisionForm\";\nimport AddConsequentialDependentDecisionForm from \"../../forms/addConsequentialDependentDecisionForm\";\n\nenum SwitchFormTypes {\n  ADD_SIMPLE,\n  ADD_CONSEQUENTIAL,\n  ADD_SIMPLE_DEPENDENT,\n  ADD_CONSEQUENTIAL_DEPENDENT,\n  NONE,\n}\n\ninterface ChoiceCardProps {\n  readonly choice: Choice;\n  readonly choices: Choice[];\n  readonly decisions: Decision[];\n  readonly statuses: StoryStatus[];\n  readonly onSuccess: () => void;\n  readonly message: Messenger;\n}\n\nconst ChoiceCard: React.FC<ChoiceCardProps> = ({\n  choice,\n  choices,\n  decisions,\n  statuses,\n  onSuccess,\n  message,\n}) => {\n  const [editing, setEditing] = useState(false);\n  const hasOptions = choice.options.length > 0;\n  const [currentForm, setCurrentForm] = useState<SwitchFormTypes>(\n    SwitchFormTypes.NONE\n  );\n\n  const onFormSuccess = (): void => {\n    onSuccess();\n    setCurrentForm(SwitchFormTypes.NONE);\n  };\n\n  const onRemoveChoice = (): void => {\n    Client.removeChoice(choice.id).then(onSuccess, message.errorAlert);\n  };\n\n  return (\n    <>\n      <BoxCard title={`Choice #${choice.id}`} minWidth={\"350px\"}>\n        {choice.options.map((option) => {\n          const decision: Decision = decisions[option.decision];\n          return (\n            <Text key={option.id}>{`Option #${option.id}: ${\n              decision.description\n            } => Choice #${decision.outcome1Id} ${\n              decision.outcome2Id > -1 ? `or #${decision.outcome2Id}` : \"\"\n            }`}</Text>\n          );\n        })}\n        {!hasOptions && <Text>No options</Text>}\n        <Box textAlign={\"right\"} mt={\"15px\"} mb={\"-10px\"}>\n          <SoftButton text={\"Edit\"} onClick={() => setEditing(true)} />\n        </Box>\n      </BoxCard>\n\n      <Modal visible={editing} onClose={() => setEditing(false)}>\n        <FormContainer>\n          <Header>Edit Choice #{choice.id}</Header>\n          <Box width={\"80vw\"}>\n            <Flex mt={\"20px\"} flexWrap={\"wrap\"} width={\"60vw\"}>\n              {choice.options.map((option) => {\n                return (\n                  <OptionCard\n                    key={option.id}\n                    choice={choice.id}\n                    option={option.id}\n                    decision={decisions[option.decision]}\n                    onSuccess={onSuccess}\n                    message={message}\n                  />\n                );\n              })}\n              {!hasOptions && <Text>No options</Text>}\n            </Flex>\n          </Box>\n\n          <Box>\n            {(() => {\n              switch (currentForm) {\n                case SwitchFormTypes.ADD_SIMPLE:\n                  return (\n                    <>\n                      <Header>Add Simple Option</Header>\n                      <AddSimpleDecisionForm\n                        onSuccess={onFormSuccess}\n                        choiceId={choice.id}\n                        choices={choices}\n                      />\n                      <SoftButton\n                        text={\"Cancel\"}\n                        onClick={() => setCurrentForm(SwitchFormTypes.NONE)}\n                      />\n                    </>\n                  );\n                case SwitchFormTypes.ADD_CONSEQUENTIAL:\n                  return (\n                    <>\n                      <Header>Add Consequential Option</Header>\n                      <AddConsequentialDecisionForm\n                        onSuccess={onFormSuccess}\n                        choiceId={choice.id}\n                        choices={choices}\n                        statuses={statuses}\n                      />\n                      <SoftButton\n                        text={\"Cancel\"}\n                        onClick={() => setCurrentForm(SwitchFormTypes.NONE)}\n                      />\n                    </>\n                  );\n                case SwitchFormTypes.ADD_SIMPLE_DEPENDENT:\n                  return (\n                    <>\n                      <Header>Add Simple Dependent Decision</Header>\n                      <AddSimpleDependentDecisionForm\n                        onSuccess={onFormSuccess}\n                        choiceId={choice.id}\n                        choices={choices}\n                        statuses={statuses}\n                      />\n                      <SoftButton\n                        text={\"Cancel\"}\n                        onClick={() => setCurrentForm(SwitchFormTypes.NONE)}\n                      />\n                    </>\n                  );\n                case SwitchFormTypes.ADD_CONSEQUENTIAL_DEPENDENT:\n                  return (\n                    <>\n                      <Header>Add Consequential Dependent Decision</Header>\n                      <AddConsequentialDependentDecisionForm\n                        onSuccess={onFormSuccess}\n                        choiceId={choice.id}\n                        choices={choices}\n                        statuses={statuses}\n                      />\n                      <SoftButton\n                        text={\"Cancel\"}\n                        onClick={() => setCurrentForm(SwitchFormTypes.NONE)}\n                      />\n                    </>\n                  );\n                case SwitchFormTypes.NONE:\n                default:\n                  return (\n                    <>\n                      <StrongText mb={\"5px\"}>Add Option</StrongText>\n                      <SoftButton\n                        text={\"Add Simple Option\"}\n                        margin={ACTION_BUTTON_MARGIN}\n                        onClick={() =>\n                          setCurrentForm(SwitchFormTypes.ADD_SIMPLE)\n                        }\n                      />\n                      <SoftButton\n                        text={\"Add Consequential Option\"}\n                        margin={ACTION_BUTTON_MARGIN}\n                        onClick={() =>\n                          setCurrentForm(SwitchFormTypes.ADD_CONSEQUENTIAL)\n                        }\n                      />\n                      <SoftButton\n                        text={\"Add Simple Dependent Option\"}\n                        margin={ACTION_BUTTON_MARGIN}\n                        onClick={() =>\n                          setCurrentForm(SwitchFormTypes.ADD_SIMPLE_DEPENDENT)\n                        }\n                      />\n                      <SoftButton\n                        text={\"Add Consequential Dependent Option\"}\n                        margin={ACTION_BUTTON_MARGIN}\n                        onClick={() =>\n                          setCurrentForm(\n                            SwitchFormTypes.ADD_CONSEQUENTIAL_DEPENDENT\n                          )\n                        }\n                      />\n                    </>\n                  );\n              }\n            })()}\n          </Box>\n\n          <Box textAlign={\"right\"} mt={\"10px\"}>\n            <Button onClick={onRemoveChoice} bg={WARN}>\n              Remove Choice\n            </Button>\n          </Box>\n        </FormContainer>\n      </Modal>\n    </>\n  );\n};\n\nexport default ChoiceCard;\n","import styled from \"@emotion/styled\";\nimport { Box, Button, Flex, Text } from \"rebass\";\n\nexport const PRIMARY = \"#4FC1E9\";\nexport const SECONDARY = \"#00A8B5\";\nexport const TERTIARY = \"#5978ab\";\nexport const WARN = \"#ff7373\";\nexport const WHITE = \"#FFF\";\nexport const BLACK = \"#000\";\nexport const SOFT_BLACK = \"#00171f\";\n\nexport const ACTION_BUTTON_MARGIN = \"0 5px 5px 0\";\n\nexport const FooterPageContainer = styled.div`\n  position: fixed;\n  top: 10vh;\n  width: 100vw;\n  height: 90vh;\n  padding: 20px 40px 100px;\n  overflow-y: auto;\n  box-sizing: border-box;\n\n  @media only screen and (max-width: 813px) {\n    padding: 20px 20px 60px;\n  }\n`;\n\nexport const PageContainer = styled.div`\n  position: fixed;\n  top: 10vh;\n  width: 100vw;\n  height: 90vh;\n  padding: 20px 40px;\n  overflow-y: auto;\n  box-sizing: border-box;\n\n  @media only screen and (max-width: 813px) {\n    padding: 20px;\n  }\n`;\n\nexport const BlackPageContainer = styled(PageContainer)`\n  padding: 20px 40px;\n  background: linear-gradient(45deg, ${SOFT_BLACK} 60%, #003042);\n  color: ${WHITE};\n\n  @media only screen and (max-width: 813px) {\n    padding: 20px;\n  }\n`;\n\nexport const StoryTitle = styled(Text)`\n  padding-top: 20px;\n  font-size: 48px;\n  font-weight: bold;\n  padding-bottom: 20px;\n`;\n\nexport const InlineText = styled(Text)`\n  display: inline-block;\n`;\n\nexport const StrongText = styled(Text)`\n  font-weight: bold;\n`;\n\nexport const Header = styled(Text)`\n  font-size: 24px;\n  font-weight: bold;\n  padding: 15px 0 5px;\n`;\n\nexport const ButtonLabel = styled(Text)`\n  font-size: 25px;\n  padding: 0 10px;\n\n  @media only screen and (max-width: 813px) {\n    font-size: 20px;\n  }\n`;\n\nexport const FormContainer = styled.div`\n  width: 60vw;\n  min-height: 200px;\n  color: ${BLACK};\n  padding: 50px;\n  text-align: left;\n  line-height: 20px;\n`;\n\nexport const TitleBox = styled(Box)`\n  text-align: left;\n  font-size: 52px;\n  font-weight: bold;\n  margin-top: 30px;\n  margin-bottom: 50px;\n`;\n\nexport const EmptyLibrary = styled(Box)`\n  text-align: center;\n  width: 100%;\n  font-size: 20px;\n  padding-top: 30px;\n`;\n\nexport const MidFlexElement = styled(Box)`\n  margin: 0 10px;\n\n  @media only screen and (max-width: 813px) {\n    margin: 0;\n  }\n`;\n\nexport const EndFlexElement = styled(Box)`\n  margin-left: 10px;\n\n  @media only screen and (max-width: 813px) {\n    margin: 10px 0 0 0;\n  }\n`;\n\nexport const BottomFlex = styled(Flex)`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  background: ${SOFT_BLACK};\n  padding: 10px 20px;\n  width: 100%;\n  justify-content: flex-end;\n\n  @media only screen and (max-width: 813px) {\n    padding: 5px;\n  }\n`;\n\nexport const BottomCornerFlex = styled(Flex)`\n  position: absolute;\n  bottom: 20px;\n  right: 20px;\n`;\n\nexport const PrimaryButton = styled(Button)`\n  background: ${PRIMARY};\n`;\n\nexport const SecondaryButton = styled(Button)`\n  background: ${SECONDARY};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport Client from \"../../client/client\";\nimport { Box, Button, Text } from \"rebass\";\nimport { Checkbox, Input, Label } from \"@rebass/forms\";\nimport { PRIMARY, WARN } from \"../../themes\";\nimport { ApplicationTypes, ErrorResponse } from \"../../client/types\";\n\ninterface ExportFormProps {\n  readonly name: string;\n  readonly onSuccess: () => void;\n  readonly exportType: ApplicationTypes;\n}\n\nconst ExportForm: React.FC<ExportFormProps> = ({\n  name,\n  onSuccess,\n  exportType,\n}) => {\n  // Error message\n  const [errorVisible, setErrorVisible] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  // Export Form\n  const [path, setPath] = useState<string>();\n  const [exportOriginal, setExportOriginal] = useState(true);\n\n  const exportStory: boolean = exportType === ApplicationTypes.STORY;\n\n  useEffect(() => {\n    setPath(`${name}.txt`);\n  }, [name]);\n\n  const handleStoryExport = (): void => {\n    if (!path) {\n      showError(\"Export path is required.\");\n    } else if (exportOriginal) {\n      Client.exportStory(path, name).then(onSuccess, handleError);\n    } else {\n      Client.exportStoryInProgress(path, name).then(onSuccess, handleError);\n    }\n  };\n\n  const handleWorkExport = (): void => {\n    if (!path) {\n      showError(\"Export path is required.\");\n    } else {\n      Client.exportWork(path).then(onSuccess, handleError);\n    }\n  };\n\n  const handleError = (err: ErrorResponse): void => {\n    showError(\"Could not export: \" + err.message);\n  };\n\n  const showError = (message: string): void => {\n    setErrorMessage(message);\n    setErrorVisible(true);\n  };\n\n  return (\n    <Box>\n      <Text mb={20}>Exporting: {name}</Text>\n      <Label>Path to export to</Label>\n      <Input\n        name={\"path\"}\n        defaultValue={path}\n        placeholder={`${name}.txt`}\n        mb={20}\n        onChange={(e) => setPath(e.target.value)}\n      />\n      {exportStory && (\n        <Label mb={20}>\n          <Checkbox\n            id={\"original\"}\n            name={\"original\"}\n            onChange={() => setExportOriginal((prev) => !prev)}\n          />\n          Export With Saved Progress\n        </Label>\n      )}\n      <Button\n        bg={PRIMARY}\n        onClick={exportStory ? handleStoryExport : handleWorkExport}\n      >\n        Submit\n      </Button>\n      {errorVisible && <Text color={WARN}>{errorMessage}</Text>}\n    </Box>\n  );\n};\n\nexport default ExportForm;\n","import React, { useState } from \"react\";\nimport Client from \"../../client/client\";\nimport { Button, Text } from \"rebass\";\nimport { Input, Label } from \"@rebass/forms\";\nimport { PRIMARY, WARN } from \"../../themes\";\nimport { ApplicationTypes, ErrorResponse } from \"../../client/types\";\nimport { FormContainer, Header } from \"../../themes\";\n\ninterface ImportFormProps {\n  readonly onSuccess: () => void;\n  readonly importType: ApplicationTypes;\n}\n\nconst ImportForm: React.FC<ImportFormProps> = ({ onSuccess, importType }) => {\n  // Error message\n  const [errorVisible, setErrorVisible] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  // Import Form\n  const [importPath, setImportPath] = useState<string>();\n\n  const handleImport = (): void => {\n    if (!importPath) {\n      showError(\"File path is required.\");\n    } else {\n      let promise;\n      switch (importType) {\n        case ApplicationTypes.STORY:\n          promise = Client.importStory(importPath);\n          break;\n        case ApplicationTypes.WORK:\n          promise = Client.importWork(importPath);\n      }\n      promise.then(onSuccess, (err: ErrorResponse) =>\n        showError(\"Could not import: \" + err.message)\n      );\n    }\n  };\n\n  const showError = (message: string): void => {\n    setErrorMessage(message);\n    setErrorVisible(true);\n  };\n\n  return (\n    <FormContainer>\n      <Header mb={20}>Import a story!</Header>\n      <Label>Path of story file:</Label>\n      <Input\n        name={\"path\"}\n        placeholder={`./your-story.txt`}\n        mb={20}\n        onChange={(e) => setImportPath(e.target.value)}\n      />\n      <Button bg={PRIMARY} onClick={handleImport}>\n        Submit\n      </Button>\n      {errorVisible && <Text color={WARN}>{errorMessage}</Text>}\n    </FormContainer>\n  );\n};\n\nexport default ImportForm;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Button, Text } from \"rebass\";\nimport { BLACK, WHITE } from \"../../themes\";\n\nconst CloseBackground = styled(Button)`\n  position: fixed;\n  z-index: 2;\n  left: 0;\n  top: 0;\n  color: ${BLACK};\n  opacity: 0.5;\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst ViewWindow = styled.div`\n  position: fixed;\n  z-index: 3;\n  top: 60%;\n  left: 50%;\n  transform: translate(-50%, -55%);\n  background-color: ${WHITE};\n  border: 2px solid ${BLACK}20;\n  border-radius: 20;\n  max-height: 85vh;\n  max-width: 95vw;\n  overflow-y: auto;\n`;\n\nconst CloseButton = styled(Button)`\n  background: ${WHITE};\n  position: fixed;\n  right: 0;\n`;\n\nconst ButtonText = styled(Text)`\n  color: ${BLACK};\n  font-size: 25px;\n  padding: 5px;\n`;\n\ninterface ModalProps {\n  readonly visible: boolean;\n  readonly onClose: () => void;\n}\n\nconst Modal: React.FC<ModalProps> = ({ visible, onClose, children }) => {\n  return (\n    <>\n      {visible && (\n        <>\n          <CloseBackground onClick={onClose} />\n          <ViewWindow>\n            <CloseButton onClick={onClose}>\n              <ButtonText>X</ButtonText>\n            </CloseButton>\n            {children}\n          </ViewWindow>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Modal;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Box, Text } from \"rebass\";\nimport { SECONDARY, SOFT_BLACK } from \"../../themes\";\n\ninterface StoryCardProps {\n  minWidth?: string;\n}\n\nexport const StoryCard = styled(Box)`\n  padding: 20px;\n  min-width: ${(props: StoryCardProps) =>\n    props.minWidth ? props.minWidth : `200px`};\n  border: 2px solid ${SECONDARY};\n  border-radius: 5px;\n  margin-right: 20px;\n  margin-bottom: 10px;\n  box-shadow: 2px 3px 5px ${SOFT_BLACK};\n`;\n\nexport const CardHeader = styled(Text)`\n  font-size: 19px;\n  font-weight: bold;\n  padding-top: 5px;\n  padding-bottom: 15px;\n`;\n\ninterface CardProps {\n  readonly title: string;\n  readonly minWidth?: string;\n}\n\nconst BoxCard: React.FC<CardProps> = ({ title, minWidth, children }) => {\n  return (\n    <StoryCard minWidth={minWidth}>\n      <CardHeader>{title}</CardHeader>\n      {children}\n    </StoryCard>\n  );\n};\n\nexport default BoxCard;\n","import React from \"react\";\nimport { Button, Text } from \"rebass\";\nimport { TERTIARY, WHITE } from \"../../themes\";\n\ninterface SoftButtonProps {\n  readonly onClick?: () => void;\n  readonly text: string;\n  readonly margin?: string;\n}\n\nconst SoftButton: React.FC<SoftButtonProps> = ({ onClick, text, margin }) => {\n  return (\n    <>\n      <Button onClick={onClick} bg={TERTIARY} margin={margin ? margin : \"0\"}>\n        <Text color={WHITE}>{text}</Text>\n      </Button>\n    </>\n  );\n};\n\nexport default SoftButton;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Client from \"../../client/client\";\nimport { Button, Flex, Text } from \"rebass\";\nimport {\n  BottomFlex,\n  EmptyLibrary,\n  FormContainer,\n  FooterPageContainer,\n  SecondaryButton,\n  TitleBox,\n} from \"../../themes\";\nimport { PRIMARY, TERTIARY, WARN } from \"../../themes\";\nimport ExportForm from \"../../forms/exportForm\";\nimport ImportForm from \"../../forms/importForm\";\nimport Modal from \"../../components/modal\";\nimport { ErrorHandlerProps, Routes } from \"../../App\";\nimport { ApplicationTypes, ErrorResponse } from \"../../client/types\";\nimport BoxCard from \"../../components/boxCard\";\nimport SoftButton from \"../../components/softButton\";\n\nconst Player: React.FC<ErrorHandlerProps> = ({ message }) => {\n  const [library, setLibrary] = useState<string[]>([]);\n  const [manageLibrary, setManageLibrary] = useState(false);\n  // Export Form\n  const [exportVisible, setExportVisible] = useState(false);\n  const [exportName, setExportName] = useState<string>();\n  // Import Form\n  const [importVisible, setImportVisible] = useState(false);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    Client.getAllStoryNames().then(\n      (res) => setLibrary(res),\n      (err: ErrorResponse) => window.alert(err.message)\n    );\n  });\n\n  const updateLibrary = (): void => {\n    Client.getAllStoryNames().then(\n      (res) => setLibrary(res),\n      message.errorAlert\n    );\n  };\n\n  const onClickExport = (name: string): void => {\n    setExportVisible(true);\n    setExportName(name);\n  };\n\n  const onImportSuccess = (): void => {\n    setImportVisible(false);\n    updateLibrary();\n  };\n\n  const onExportSuccess = (): void => {\n    message.triggerMessage(\"Exported successfully!\");\n    setExportVisible(false);\n  };\n\n  const onDelete = (name: string): void => {\n    Client.removeStory(name).then(updateLibrary, (err: ErrorResponse) =>\n      message.triggerAlert(\"Could not delete: \" + err.message)\n    );\n  };\n\n  const loadStory = (name: string): void => {\n    Client.loadStory(name).then(\n      () => history.push(Routes.PLAYER_PLAY),\n      message.errorAlert\n    );\n  };\n\n  return (\n    <FooterPageContainer>\n      <TitleBox>\n        <Text>Play stories in your library!</Text>\n      </TitleBox>\n      <Flex flexWrap={\"wrap\"}>\n        {library.map((title) => {\n          return (\n            <BoxCard key={title} title={title}>\n              {(() => {\n                switch (manageLibrary) {\n                  case false:\n                    return (\n                      <Flex mb={\"5px\"}>\n                        <Button\n                          onClick={() => loadStory(title)}\n                          mr={\"5px\"}\n                          bg={PRIMARY}\n                        >\n                          Play\n                        </Button>\n                        <SoftButton\n                          text={\"Export\"}\n                          onClick={() => onClickExport(title)}\n                        />\n                      </Flex>\n                    );\n                  case true:\n                    return (\n                      <Button onClick={() => onDelete(title)} bg={WARN}>\n                        Delete\n                      </Button>\n                    );\n                }\n              })()}\n            </BoxCard>\n          );\n        })}\n        {library.length === 0 && (\n          <EmptyLibrary>\n            <Text>\n              You don't have any stories in your library. Import some by\n              clicking \"Manage Library.\" Then click \"Import!\"\n            </Text>\n          </EmptyLibrary>\n        )}\n      </Flex>\n\n      <BottomFlex>\n        <SecondaryButton onClick={() => setImportVisible(true)} mr={\"10px\"}>\n          Import\n        </SecondaryButton>\n        <Button\n          onClick={() => setManageLibrary((prev) => !prev)}\n          padding={\"15px 25px\"}\n          bg={TERTIARY}\n        >\n          {manageLibrary ? \"Stop Managing Library\" : \"Manage Library\"}\n        </Button>\n      </BottomFlex>\n\n      {exportName && (\n        <Modal visible={exportVisible} onClose={() => setExportVisible(false)}>\n          <FormContainer>\n            <ExportForm\n              name={exportName}\n              onSuccess={onExportSuccess}\n              exportType={ApplicationTypes.STORY}\n            />\n          </FormContainer>\n        </Modal>\n      )}\n\n      <Modal visible={importVisible} onClose={() => setImportVisible(false)}>\n        <ImportForm\n          onSuccess={onImportSuccess}\n          importType={ApplicationTypes.STORY}\n        />\n      </Modal>\n    </FooterPageContainer>\n  );\n};\n\nexport default Player;\n","import React from \"react\";\nimport { Text } from \"rebass\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"@emotion/styled\";\nimport { WHITE } from \"../../themes\";\n\nconst LinkText = styled(Text)`\n  color: ${WHITE};\n  font-weight: bold;\n  font-size: 20px;\n`;\n\nconst NavLink: React.FC<any> = ({ href, ...rest }) => {\n  const history = useHistory();\n  return (\n    <LinkText\n      {...rest}\n      onClick={() => {\n        history.push(href);\n      }}\n    />\n  );\n};\n\nexport default NavLink;\n","import React from \"react\";\nimport { Flex, Box } from \"rebass\";\nimport { BLACK, PRIMARY } from \"../../themes\";\nimport { Routes } from \"../../App\";\nimport styled from \"@emotion/styled\";\nimport NavLink from \"../navLink\";\n\nconst NavFlex = styled(Flex)`\n  position: fixed;\n  width: 100vw;\n  height: 10vh;\n  z-index: 1;\n  padding: 20px 25px;\n  color: ${PRIMARY};\n  background-color: ${BLACK};\n  align-items: center;\n`;\n\nconst NavBar: React.FC = () => {\n  return (\n    <NavFlex>\n      <NavLink href={Routes.HOME} fontSize={25} color={PRIMARY}>\n        Saga\n      </NavLink>\n      <Box mx=\"auto\" />\n      <NavLink marginRight={4} href={Routes.PLAYER_LIBRARY}>\n        Play\n      </NavLink>\n      <NavLink href={Routes.WRITER_LIBRARY}>Write</NavLink>\n    </NavFlex>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { Button } from \"rebass\";\nimport { useHistory } from \"react-router-dom\";\n\nconst LinkButton: React.FC<any> = ({ to, ...rest }) => {\n  const history = useHistory();\n  return (\n    <Button\n      {...rest}\n      onClick={() => {\n        history.push(to);\n      }}\n    />\n  );\n};\n\nexport default LinkButton;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Box, Flex, Text } from \"rebass\";\nimport { ButtonLabel, InlineText, BlackPageContainer } from \"../../themes\";\nimport { SECONDARY, PRIMARY } from \"../../themes\";\nimport LinkButton from \"../../components/linkButton\";\nimport { ErrorHandlerProps, Routes } from \"../../App\";\n\nconst HomePageContainer = styled(Flex)`\n  padding-left: 40px;\n  flex-direction: column;\n  justify-content: center;\n\n  @media only screen and (max-width: 813px) {\n    padding-left: 0;\n  }\n`;\n\nconst TitleBox = styled(Box)`\n  font-size: 52px;\n  font-weight: bold;\n`;\n\nconst GreetingDescription = styled(Text)`\n  padding-left: 100px;\n\n  @media only screen and (max-width: 813px) {\n    font-size: 42px;\n    padding-left: 0;\n  }\n`;\n\nconst Italic = styled(Text)`\n  display: inline-block;\n  font-style: italic;\n`;\n\nconst ButtonFlex = styled(Flex)`\n  height: 100px;\n\n  @media only screen and (max-width: 813px) {\n    height: 80px;\n  }\n`;\n\nconst Spacer = styled(Box)`\n  height: 25vh;\n\n  @media only screen and (max-height: 813px) {\n    height: 15vh;\n  }\n`;\n\nconst SmallSpacer = styled(Box)`\n  height: 10vh;\n`;\n\nconst Home: React.FC<ErrorHandlerProps> = () => {\n  return (\n    <BlackPageContainer>\n      <HomePageContainer>\n        <Spacer />\n        <TitleBox>\n          <Text>\n            Welcome to <InlineText color={PRIMARY}>Saga</InlineText>,\n          </Text>\n          <GreetingDescription>\n            where you can <Italic color={PRIMARY}>play</Italic> and{\" \"}\n            <Italic color={SECONDARY}>write</Italic> interactive stories.\n          </GreetingDescription>\n        </TitleBox>\n        <SmallSpacer />\n        <ButtonFlex>\n          <LinkButton to={Routes.PLAYER_LIBRARY} bg={PRIMARY}>\n            <ButtonLabel>Play a story!</ButtonLabel>\n          </LinkButton>\n          <Box width={15} />\n          <LinkButton to={Routes.WRITER_LIBRARY} bg={SECONDARY}>\n            <ButtonLabel>Write a new masterpiece!</ButtonLabel>\n          </LinkButton>\n        </ButtonFlex>\n      </HomePageContainer>\n    </BlackPageContainer>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Box, Button, Flex, Text } from \"rebass\";\nimport { BLACK, WARN, WHITE } from \"../../themes\";\n\nconst Banner = styled(Flex)`\n  border: 1px solid ${BLACK};\n  border-radius: 20;\n  padding: 5px 0 5px 15px;\n  margin-bottom: 10px;\n  z-index: 4;\n`;\n\nconst CloseButton = styled(Button)`\n  padding: 0;\n  background: 0;\n`;\n\nexport interface AlertMessage {\n  readonly visible: boolean;\n  readonly message: string;\n  readonly warn: boolean;\n}\n\ninterface AlertProps extends AlertMessage {\n  readonly onClose: () => void;\n}\n\nconst Alert: React.FC<AlertProps> = ({ visible, message, warn, onClose }) => {\n  return (\n    <>\n      {visible && (\n        <>\n          <Banner bg={warn ? WARN : WHITE}>\n            <Text my={\"auto\"}>{message}</Text>\n            <Box mx={\"auto\"} />\n            <CloseButton onClick={onClose} color={BLACK}>\n              X\n            </CloseButton>\n          </Banner>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Alert;\n","import React, { useState } from \"react\";\nimport { ErrorHandlerProps } from \"../../App\";\nimport Client from \"../../client/client\";\nimport { Input } from \"@rebass/forms\";\nimport { Header, PrimaryButton } from \"../../themes\";\n\nconst DEFAULT_NAME = \"Untitled\";\n\ninterface StartWorkFormProps extends ErrorHandlerProps {\n  readonly onSuccess: () => void;\n}\n\nconst StartWorkForm: React.FC<StartWorkFormProps> = ({\n  onSuccess,\n  message,\n}) => {\n  const [name, setName] = useState<string>(DEFAULT_NAME);\n\n  const onStartWork = (): void => {\n    Client.startNewWork(name).then(onSuccess, message.errorAlert);\n  };\n\n  return (\n    <>\n      <Header>Start your next story!</Header>\n      <Input\n        name={\"name\"}\n        defaultValue={DEFAULT_NAME}\n        placeholder={\"Name of new work\"}\n        onChange={(e) => setName(e.target.value)}\n        my={\"10px\"}\n      />\n      <PrimaryButton onClick={onStartWork}>Create New Work</PrimaryButton>\n    </>\n  );\n};\n\nexport default StartWorkForm;\n","import React, { useState } from \"react\";\nimport { ErrorHandlerProps } from \"../../App\";\nimport { Header, PrimaryButton } from \"../../themes\";\nimport Client from \"../../client/client\";\nimport { Input } from \"@rebass/forms\";\n\ninterface RenameWorkFormProps extends ErrorHandlerProps {\n  readonly currentName: string;\n  readonly onSuccess: () => void;\n}\n\nconst RenameWorkForm: React.FC<RenameWorkFormProps> = ({\n  currentName,\n  onSuccess,\n  message,\n}) => {\n  const [newName, setNewName] = useState<string>(currentName);\n\n  const onRename = (): void => {\n    Client.renameWork(currentName, newName).then(onSuccess, message.errorAlert);\n  };\n\n  return (\n    <>\n      <Header>Rename {currentName}</Header>\n      <Input\n        name={\"newName\"}\n        defaultValue={currentName}\n        placeholder={\"New Name\"}\n        onChange={(e) => setNewName(e.target.value)}\n        my={\"10px\"}\n      />\n      <PrimaryButton onClick={onRename}>Rename</PrimaryButton>\n    </>\n  );\n};\n\nexport default RenameWorkForm;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Client from \"../../client/client\";\nimport { Button, Flex, Text } from \"rebass\";\nimport {\n  BottomFlex,\n  EmptyLibrary,\n  FormContainer,\n  FooterPageContainer,\n  SecondaryButton,\n  TitleBox,\n} from \"../../themes\";\nimport { PRIMARY, TERTIARY, WARN } from \"../../themes\";\nimport ImportForm from \"../../forms/importForm\";\nimport Modal from \"../../components/modal\";\nimport { ErrorHandlerProps, Routes } from \"../../App\";\nimport { ApplicationTypes, ErrorResponse } from \"../../client/types\";\nimport BoxCard from \"../../components/boxCard\";\nimport StartWorkForm from \"../../forms/startWorkForm\";\nimport RenameWorkForm from \"../../forms/renameWorkForm\";\nimport SoftButton from \"../../components/softButton\";\n\nconst Writer: React.FC<ErrorHandlerProps> = ({ message }) => {\n  const [library, setLibrary] = useState<string[]>([]);\n  const [manageLibrary, setManageLibrary] = useState(false);\n  // Form visibility\n  const [renameVisible, setRenameVisible] = useState(false);\n  const [startVisible, setStartVisible] = useState(false);\n  const [importVisible, setImportVisible] = useState(false);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    Client.getAllWorkNames()\n      .then((res) => setLibrary(res))\n      .catch((err) => window.alert(err.message));\n  });\n\n  const updateLibrary = (): void => {\n    Client.getAllWorkNames().then((res) => setLibrary(res), message.errorAlert);\n  };\n\n  const onRenameSuccess = (): void => {\n    setRenameVisible(false);\n    updateLibrary();\n  };\n\n  const onStartNewSuccess = (): void => {\n    setStartVisible(false);\n    updateLibrary();\n  };\n\n  const onImportSuccess = (): void => {\n    setImportVisible(false);\n    updateLibrary();\n  };\n\n  const onDelete = (name: string): void => {\n    Client.removeWork(name).then(updateLibrary, (err: ErrorResponse) =>\n      message.triggerAlert(\"Could not delete: \" + err.message)\n    );\n  };\n\n  const loadWork = (name: string): void => {\n    Client.loadWork(name).then(\n      () => history.push(Routes.WRITER_EDIT),\n      message.errorAlert\n    );\n  };\n\n  return (\n    <FooterPageContainer>\n      <TitleBox>\n        <Text>Write your next story!</Text>\n      </TitleBox>\n      <Flex flexWrap={\"wrap\"}>\n        {library.map((title) => {\n          return (\n            <BoxCard key={title} title={title}>\n              {(() => {\n                switch (manageLibrary) {\n                  case false:\n                    return (\n                      <Button\n                        onClick={() => loadWork(title)}\n                        bg={PRIMARY}\n                        mb={\"5px\"}\n                      >\n                        Edit\n                      </Button>\n                    );\n                  case true:\n                    return (\n                      <Flex>\n                        <Modal\n                          visible={renameVisible}\n                          onClose={() => setRenameVisible(false)}\n                        >\n                          <FormContainer>\n                            <RenameWorkForm\n                              currentName={title}\n                              onSuccess={onRenameSuccess}\n                              message={message}\n                            />\n                          </FormContainer>\n                        </Modal>\n                        <SoftButton\n                          text={\"Rename\"}\n                          onClick={() => setRenameVisible(true)}\n                          margin={\"0 5px 0 0\"}\n                        />\n                        <Button onClick={() => onDelete(title)} bg={WARN}>\n                          Delete\n                        </Button>\n                      </Flex>\n                    );\n                }\n              })()}\n            </BoxCard>\n          );\n        })}\n        {library.length === 0 && (\n          <EmptyLibrary>\n            <Text>\n              You don't have any works in your library. Create a new one!\n            </Text>\n          </EmptyLibrary>\n        )}\n      </Flex>\n\n      <BottomFlex>\n        <SecondaryButton onClick={() => setStartVisible(true)}>\n          Start New\n        </SecondaryButton>\n        <SecondaryButton\n          onClick={() => setImportVisible(true)}\n          margin={\"0 10px\"}\n        >\n          Import\n        </SecondaryButton>\n        <Button\n          onClick={() => setManageLibrary((prev) => !prev)}\n          padding={\"15px 25px\"}\n          bg={TERTIARY}\n        >\n          {manageLibrary ? \"Stop Managing Library\" : \"Manage Library\"}\n        </Button>\n      </BottomFlex>\n\n      <Modal visible={startVisible} onClose={() => setStartVisible(false)}>\n        <FormContainer>\n          <StartWorkForm onSuccess={onStartNewSuccess} message={message} />\n        </FormContainer>\n      </Modal>\n\n      <Modal visible={importVisible} onClose={() => setImportVisible(false)}>\n        <ImportForm\n          onSuccess={onImportSuccess}\n          importType={ApplicationTypes.WORK}\n        />\n      </Modal>\n    </FooterPageContainer>\n  );\n};\n\nexport default Writer;\n","import React from \"react\";\nimport { Decision, DecisionTypes, StatusUpdateTypes } from \"../../client/types\";\nimport { Text } from \"rebass\";\nimport { StrongText } from \"../../themes\";\n\ninterface DecisionDescriptionProps {\n  readonly decision: Decision;\n}\n\nconst DecisionDescription: React.FC<DecisionDescriptionProps> = ({\n  decision,\n}) => {\n  return (\n    <>\n      <StrongText>Type</StrongText>\n      <Text>{decision.type.toString()}</Text>\n      <StrongText>Description</StrongText>\n      <Text>{decision.description}</Text>\n      <StrongText>Outcome</StrongText>\n      {(() => {\n        switch (decision.type) {\n          case DecisionTypes.DEPENDENT:\n            return (\n              <>\n                <Text>\n                  if {decision.dependency} is below {decision.threshold}: Choice\n                  #{decision.outcome1Id}\n                </Text>\n                <Text>\n                  if {decision.dependency} is above {decision.threshold}: Choice\n                  #{decision.outcome2Id}\n                </Text>\n              </>\n            );\n          default:\n            return <Text>Choice #{decision.outcome1Id}</Text>;\n        }\n      })()}\n      <StrongText>Consequences</StrongText>\n      {decision.consequences?.map((cons, i) => {\n        let text: string;\n        switch (cons.type) {\n          case StatusUpdateTypes.ADD:\n            text = `Add ${cons.var} to ${cons.status}`;\n            break;\n          case StatusUpdateTypes.SET:\n            text = `Set ${cons.status} to ${cons.var}`;\n            break;\n        }\n        return <Text key={i}>{text}</Text>;\n      })}\n      {decision.consequences?.length === 0 && <Text>None</Text>}\n    </>\n  );\n};\n\nexport default DecisionDescription;\n","import React from \"react\";\nimport { Decision } from \"../../client/types\";\nimport BoxCard from \"../boxCard\";\nimport DecisionDescription from \"../decisionDescription\";\nimport { Button } from \"rebass\";\nimport Client from \"../../client/client\";\nimport { ErrorHandlerProps } from \"../../App\";\nimport { WARN } from \"../../themes\";\n\ninterface OptionCardProps extends ErrorHandlerProps {\n  readonly choice: number;\n  readonly option: number;\n  readonly decision: Decision;\n  readonly onSuccess: () => void;\n}\n\nconst OptionCard: React.FC<OptionCardProps> = ({\n  choice,\n  option,\n  decision,\n  onSuccess,\n  message,\n}) => {\n  const onRemove = (): void => {\n    Client.removeOption(choice, option).then(onSuccess, message.errorAlert);\n  };\n\n  return (\n    <BoxCard title={`Option #${option}`}>\n      <DecisionDescription decision={decision} />\n      <Button onClick={onRemove} mt={\"10px\"} bg={WARN}>\n        Remove Option\n      </Button>\n    </BoxCard>\n  );\n};\n\nexport default OptionCard;\n","import React, { ChangeEvent } from \"react\";\nimport { Choice } from \"../../client/types\";\nimport { Input, Select } from \"@rebass/forms\";\nimport { Flex, Text } from \"rebass\";\nimport { StrongText } from \"../../themes\";\n\ninterface SimpleDecisionInputsProps {\n  readonly onDescriptionChange: (description: string) => void;\n  readonly onOutcomeIdChange: (outcomeId: number) => void;\n  readonly choices: Choice[];\n}\n\nconst SimpleDecisionInputs: React.FC<SimpleDecisionInputsProps> = ({\n  onDescriptionChange,\n  onOutcomeIdChange,\n  choices,\n}) => {\n  const onOutcomeSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n    onOutcomeIdChange(Number(e.currentTarget.value));\n  };\n\n  return (\n    <>\n      <StrongText>Description</StrongText>\n      <Input\n        name={\"description\"}\n        placeholder={\"Description\"}\n        my={\"5px\"}\n        onChange={(e) => onDescriptionChange(e.target.value)}\n      />\n\n      <StrongText>Outcome</StrongText>\n      <Flex alignItems={\"center\"}>\n        <Text mr={\"5px\"}>Choice #</Text>\n        <Select\n          name=\"outcomeId\"\n          onChange={onOutcomeSelect}\n          my={\"5px\"}\n          minWidth={\"50px\"}\n        >\n          {choices.map((choice) => (\n            <option key={choice.id}>{choice.id}</option>\n          ))}\n        </Select>\n      </Flex>\n    </>\n  );\n};\n\nexport default SimpleDecisionInputs;\n","import React from \"react\";\nimport { Choice, ErrorResponse } from \"../../client/types\";\nimport Client from \"../../client/client\";\nimport { Text } from \"rebass\";\nimport { WARN } from \"../../themes\";\nimport { useState } from \"react\";\nimport SimpleDecisionInputs from \"../../components/simpleDecisionInputs\";\nimport { PrimaryButton } from \"../../themes\";\n\ninterface AddSimpleDecisionFormProps {\n  readonly onSuccess: () => void;\n  readonly choiceId: number;\n  readonly choices: Choice[];\n}\n\nconst AddSimpleDecisionForm: React.FC<AddSimpleDecisionFormProps> = ({\n  onSuccess,\n  choiceId,\n  choices,\n}) => {\n  const [description, setDescription] = useState<string>();\n  const [outcomeId, setOutcomeId] = useState<number>(0);\n  // Feedback\n  const [feedback, setFeedback] = useState<string>();\n  const [showFeedback, setShowFeedback] = useState<boolean>();\n\n  const triggerFeedback = (msg: string) => {\n    setFeedback(msg);\n    setShowFeedback(true);\n  };\n\n  const onSubmit = (): void => {\n    if (description) {\n      Client.addSimpleDecision({ description, choiceId, outcomeId }).then(\n        onSuccess,\n        (err: ErrorResponse) => triggerFeedback(err.message)\n      );\n    } else {\n      triggerFeedback(\"All fields are required!\");\n    }\n  };\n\n  return (\n    <>\n      <SimpleDecisionInputs\n        onDescriptionChange={setDescription}\n        onOutcomeIdChange={setOutcomeId}\n        choices={choices}\n      />\n      {showFeedback && <Text color={WARN}>{feedback}</Text>}\n      <PrimaryButton onClick={onSubmit} mr={\"5px\"}>\n        Submit\n      </PrimaryButton>\n    </>\n  );\n};\n\nexport default AddSimpleDecisionForm;\n","import { ChangeEvent } from \"react\";\n\nexport const validateInteger = (\n  e: ChangeEvent<HTMLInputElement>,\n  onInvalid: () => void,\n  onValid: (val: number) => void\n): void => {\n  const targetValue: string = e.target.value;\n  if (targetValue.includes(\".\")) {\n    onInvalid();\n  } else {\n    onValid(Number(targetValue));\n  }\n};\n\nexport interface Feedback {\n  readonly giveFeedback: (msg: string) => void;\n  readonly hideFeedback: () => void;\n}\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport { Input, Select } from \"@rebass/forms\";\nimport { Box, Flex } from \"rebass\";\nimport { MidFlexElement, StrongText } from \"../../themes\";\nimport { StatusUpdateTypes, StoryStatus } from \"../../client/types\";\nimport { Feedback, validateInteger } from \"../../forms/utils\";\n\ninterface ConsequenceInputProps {\n  readonly onChange: (consequence: string) => void;\n  readonly statuses: StoryStatus[];\n  readonly feedback: Feedback;\n}\n\nconst ConsequenceInput: React.FC<ConsequenceInputProps> = ({\n  onChange,\n  statuses,\n  feedback,\n}) => {\n  const [type, setType] = useState<string>(StatusUpdateTypes.ADD);\n  const [val, setVal] = useState<number>(0);\n  const [name, setName] = useState<string>(statuses[0].name);\n\n  useEffect(() => {\n    if (name) {\n      onChange(`${type} ${val} ${name}`);\n    }\n  }, [onChange, type, val, name]);\n\n  const showIntegerError = (): void => {\n    feedback.giveFeedback(\"Must be an integer!\");\n  };\n\n  const changeVal = (val: number): void => {\n    feedback.hideFeedback();\n    setVal(val);\n  };\n\n  const onValInputChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    validateInteger(e, showIntegerError, changeVal);\n  };\n\n  return (\n    <Flex flexWrap={\"wrap\"}>\n      <Box minWidth={\"150px\"}>\n        <StrongText>Type</StrongText>\n        <Select\n          name=\"choiceId\"\n          onChange={(e) => setType(e.currentTarget.value)}\n        >\n          <option>{StatusUpdateTypes.ADD}</option>\n          <option>{StatusUpdateTypes.SET}</option>\n        </Select>\n      </Box>\n      <MidFlexElement minWidth={\"150px\"}>\n        <StrongText>\n          {type === StatusUpdateTypes.ADD\n            ? \"Amount to Add\"\n            : \"Number to Set To\"}\n        </StrongText>\n        <Input\n          name={\"val\"}\n          placeholder={\"0\"}\n          type={\"number\"}\n          value={val}\n          onChange={onValInputChange}\n        />\n      </MidFlexElement>\n      <Box minWidth={\"150px\"}>\n        <StrongText>Status to Impact</StrongText>\n        <Select\n          name=\"choiceId\"\n          onChange={(e) => setName(e.currentTarget.value)}\n        >\n          {statuses.map((status: StoryStatus) => {\n            return <option key={status.name}>{status.name}</option>;\n          })}\n        </Select>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default ConsequenceInput;\n","import React from \"react\";\nimport { Choice, ErrorResponse, StoryStatus } from \"../../client/types\";\nimport Client from \"../../client/client\";\nimport { Flex, Text } from \"rebass\";\nimport { WARN } from \"../../themes\";\nimport { useState } from \"react\";\nimport SimpleDecisionInputs from \"../../components/simpleDecisionInputs\";\nimport ConsequenceInput from \"../../components/consequenceInput\";\nimport { EndFlexElement, PrimaryButton, StrongText } from \"../../themes\";\nimport { Feedback } from \"../utils\";\n\ninterface AddConsequentialDecisionProps {\n  readonly onSuccess: () => void;\n  readonly choiceId: number;\n  readonly choices: Choice[];\n  readonly statuses: StoryStatus[];\n}\n\nconst AddConsequentialDecisionForm: React.FC<AddConsequentialDecisionProps> = ({\n  onSuccess,\n  choiceId,\n  choices,\n  statuses,\n}) => {\n  const [description, setDescription] = useState<string>();\n  const [outcomeId, setOutcomeId] = useState<number>(0);\n  const [consequences, setConsequences] = useState<string[]>([]);\n  const [currentConsequence, setCurrentConsequence] = useState<string>();\n  // Feedback\n  const [feedback, setFeedback] = useState<string>();\n  const [showFeedback, setShowFeedback] = useState<boolean>();\n\n  const feedbackHandler: Feedback = {\n    giveFeedback: (msg: string) => {\n      setFeedback(msg);\n      setShowFeedback(true);\n    },\n    hideFeedback: () => setShowFeedback(false),\n  };\n\n  const onAddConsequence = (): void => {\n    if (currentConsequence) {\n      setConsequences((prev) => [...prev, currentConsequence]);\n      setCurrentConsequence(undefined);\n    } else {\n      feedbackHandler.giveFeedback(\"All consequence fields are required!\");\n    }\n  };\n\n  const onSubmit = (): void => {\n    if (description) {\n      Client.addConsequentialDecision({\n        description,\n        choiceId,\n        outcomeId,\n        consequences,\n      }).then(onSuccess, (err: ErrorResponse) =>\n        feedbackHandler.giveFeedback(err.message)\n      );\n    } else {\n      feedbackHandler.giveFeedback(\"All fields are required!\");\n    }\n  };\n\n  return (\n    <>\n      <SimpleDecisionInputs\n        onDescriptionChange={setDescription}\n        onOutcomeIdChange={setOutcomeId}\n        choices={choices}\n      />\n      <StrongText>Consequences</StrongText>\n      {consequences.map((str, i) => {\n        return <Text key={i}>{str}</Text>;\n      })}\n      <Flex alignItems={\"flex-end\"} flexWrap={\"wrap\"} mt={\"5px\"}>\n        <ConsequenceInput\n          onChange={setCurrentConsequence}\n          statuses={statuses}\n          feedback={feedbackHandler}\n        />\n        <EndFlexElement>\n          <PrimaryButton onClick={onAddConsequence}>Add</PrimaryButton>\n        </EndFlexElement>\n      </Flex>\n      <br />\n      {showFeedback && <Text color={WARN}>{feedback}</Text>}\n      <PrimaryButton onClick={onSubmit} mr={\"5px\"}>\n        Submit\n      </PrimaryButton>\n    </>\n  );\n};\n\nexport default AddConsequentialDecisionForm;\n","import React, { ChangeEvent } from \"react\";\nimport { Choice, StoryStatus } from \"../../client/types\";\nimport { Input, Select } from \"@rebass/forms\";\nimport { Flex, Text } from \"rebass\";\nimport { StrongText } from \"../../themes\";\nimport { Feedback, validateInteger } from \"../../forms/utils\";\n\ninterface DependentDecisionInputProps {\n  readonly onDescriptionChange: (description: string) => void;\n  readonly onDependencyChange: (dependency: string) => void;\n  readonly onThresholdChange: (threshold: number) => void;\n  readonly onOutcomeBelowIdChange: (belowId: number) => void;\n  readonly onOutcomeMeetsIdChange: (meetsId: number) => void;\n  readonly choices: Choice[];\n  readonly statuses: StoryStatus[];\n  readonly feedback: Feedback;\n}\n\nconst DependentDecisionInputs: React.FC<DependentDecisionInputProps> = ({\n  onDescriptionChange,\n  onDependencyChange,\n  onThresholdChange,\n  onOutcomeBelowIdChange,\n  onOutcomeMeetsIdChange,\n  choices,\n  statuses,\n  feedback,\n}) => {\n  const onOutcomeBelowSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n    onOutcomeBelowIdChange(Number(e.currentTarget.value));\n  };\n\n  const onOutcomeMeetsSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n    onOutcomeMeetsIdChange(Number(e.currentTarget.value));\n  };\n\n  const showIntegerError = (): void => {\n    feedback.giveFeedback(\"Must be an integer!\");\n  };\n\n  const changeThreshold = (val: number): void => {\n    feedback.hideFeedback();\n    onThresholdChange(val);\n  };\n\n  const onThresholdInputChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    validateInteger(e, showIntegerError, changeThreshold);\n  };\n\n  return (\n    <>\n      <StrongText>Description</StrongText>\n      <Input\n        name={\"description\"}\n        placeholder={\"Description\"}\n        my={\"5px\"}\n        onChange={(e) => onDescriptionChange(e.target.value)}\n      />\n\n      <StrongText>Status the decision is dependent on</StrongText>\n      <Select\n        name={\"dependency\"}\n        onChange={(e) => onDependencyChange(e.currentTarget.value)}\n      >\n        {statuses.map((status: StoryStatus) => {\n          return <option key={status.name}>{status.name}</option>;\n        })}\n      </Select>\n\n      <StrongText>Status Value Threshold</StrongText>\n      <Input\n        name={\"threshold\"}\n        defaultValue={0}\n        placeholder={\"0\"}\n        type={\"number\"}\n        onChange={onThresholdInputChange}\n      />\n\n      <StrongText>Outcome If Status Is Below Threshold</StrongText>\n      <Flex alignItems={\"center\"}>\n        <Text mr={\"5px\"}>Choice #</Text>\n        <Select\n          name=\"outcomeBelowId\"\n          onChange={onOutcomeBelowSelect}\n          my={\"5px\"}\n          minWidth={\"50px\"}\n        >\n          {choices.map((choice) => (\n            <option key={choice.id}>{choice.id}</option>\n          ))}\n        </Select>\n      </Flex>\n\n      <StrongText>Outcome If Status Meets Threshold</StrongText>\n      <Flex alignItems={\"center\"}>\n        <Text mr={\"5px\"}>Choice #</Text>\n        <Select\n          name=\"outcomeMeetsId\"\n          onChange={onOutcomeMeetsSelect}\n          my={\"5px\"}\n          minWidth={\"50px\"}\n        >\n          {choices.map((choice) => (\n            <option key={choice.id}>{choice.id}</option>\n          ))}\n        </Select>\n      </Flex>\n    </>\n  );\n};\n\nexport default DependentDecisionInputs;\n","import React from \"react\";\nimport { Choice, ErrorResponse, StoryStatus } from \"../../client/types\";\nimport Client from \"../../client/client\";\nimport { Text } from \"rebass\";\nimport { WARN } from \"../../themes\";\nimport { useState } from \"react\";\nimport DependentDecisionInputs from \"../../components/dependentDecisionInputs\";\nimport { Feedback } from \"../utils\";\nimport { PrimaryButton } from \"../../themes\";\n\ninterface AddSimpleDependentDecisionFormProps {\n  readonly onSuccess: () => void;\n  readonly choiceId: number;\n  readonly choices: Choice[];\n  readonly statuses: StoryStatus[];\n}\n\nconst AddSimpleDependentDecisionForm: React.FC<AddSimpleDependentDecisionFormProps> =\n  ({ onSuccess, choiceId, choices, statuses }) => {\n    const [description, setDescription] = useState<string>();\n    const [dependency, setDependency] = useState<string>(statuses[0].name);\n    const [threshold, setThreshold] = useState<number>(0);\n    const [outcomeBelowId, setOutcomeBelowId] = useState<number>(0);\n    const [outcomeMeetsId, setOutcomeMeetsId] = useState<number>(0);\n    // Feedback\n    const [feedback, setFeedback] = useState<string>();\n    const [showFeedback, setShowFeedback] = useState<boolean>();\n\n    const feedbackHandler: Feedback = {\n      giveFeedback: (msg: string) => {\n        setFeedback(msg);\n        setShowFeedback(true);\n      },\n      hideFeedback: () => setShowFeedback(false),\n    };\n\n    const onSubmit = (): void => {\n      if (description) {\n        Client.addSimpleDependent({\n          description,\n          choiceId,\n          dependency,\n          threshold,\n          outcomeBelowId,\n          outcomeMeetsId,\n        }).then(onSuccess, (err: ErrorResponse) =>\n          feedbackHandler.giveFeedback(err.message)\n        );\n      } else {\n        feedbackHandler.giveFeedback(\"All fields are required!\");\n      }\n    };\n\n    return (\n      <>\n        <DependentDecisionInputs\n          onDescriptionChange={setDescription}\n          onDependencyChange={setDependency}\n          onThresholdChange={setThreshold}\n          onOutcomeBelowIdChange={setOutcomeBelowId}\n          onOutcomeMeetsIdChange={setOutcomeMeetsId}\n          choices={choices}\n          statuses={statuses}\n          feedback={feedbackHandler}\n        />\n        {showFeedback && <Text color={WARN}>{feedback}</Text>}\n        <PrimaryButton onClick={onSubmit} mr={\"5px\"}>\n          Submit\n        </PrimaryButton>\n      </>\n    );\n  };\n\nexport default AddSimpleDependentDecisionForm;\n","import React from \"react\";\nimport { Choice, ErrorResponse, StoryStatus } from \"../../client/types\";\nimport Client from \"../../client/client\";\nimport { Flex, Text } from \"rebass\";\nimport { WARN } from \"../../themes\";\nimport { useState } from \"react\";\nimport DependentDecisionInputs from \"../../components/dependentDecisionInputs\";\nimport { Feedback } from \"../utils\";\nimport { EndFlexElement, PrimaryButton, StrongText } from \"../../themes\";\nimport ConsequenceInput from \"../../components/consequenceInput\";\n\ninterface AddConsequentialDependentDecisionFormProps {\n  readonly onSuccess: () => void;\n  readonly choiceId: number;\n  readonly choices: Choice[];\n  readonly statuses: StoryStatus[];\n}\n\nconst AddConsequentialDependentDecisionForm: React.FC<AddConsequentialDependentDecisionFormProps> =\n  ({ onSuccess, choiceId, choices, statuses }) => {\n    const [description, setDescription] = useState<string>();\n    const [dependency, setDependency] = useState<string>(statuses[0].name);\n    const [threshold, setThreshold] = useState<number>(0);\n    const [outcomeBelowId, setOutcomeBelowId] = useState<number>(0);\n    const [outcomeMeetsId, setOutcomeMeetsId] = useState<number>(0);\n    const [consequences, setConsequences] = useState<string[]>([]);\n    const [currentConsequence, setCurrentConsequence] = useState<string>();\n    // Feedback\n    const [feedback, setFeedback] = useState<string>();\n    const [showFeedback, setShowFeedback] = useState<boolean>();\n\n    const feedbackHandler: Feedback = {\n      giveFeedback: (msg: string) => {\n        setFeedback(msg);\n        setShowFeedback(true);\n      },\n      hideFeedback: () => setShowFeedback(false),\n    };\n\n    const onAddConsequence = (): void => {\n      if (currentConsequence) {\n        setConsequences((prev) => [...prev, currentConsequence]);\n        setCurrentConsequence(undefined);\n      } else {\n        feedbackHandler.giveFeedback(\"All consequence fields are required!\");\n      }\n    };\n\n    const onSubmit = (): void => {\n      if (description) {\n        Client.addConsequentialDependent({\n          description,\n          choiceId,\n          dependency,\n          threshold,\n          outcomeBelowId,\n          outcomeMeetsId,\n          consequences,\n        }).then(onSuccess, (err: ErrorResponse) =>\n          feedbackHandler.giveFeedback(err.message)\n        );\n      } else {\n        feedbackHandler.giveFeedback(\"All fields are required!\");\n      }\n    };\n\n    return (\n      <>\n        <DependentDecisionInputs\n          onDescriptionChange={setDescription}\n          onDependencyChange={setDependency}\n          onThresholdChange={setThreshold}\n          onOutcomeBelowIdChange={setOutcomeBelowId}\n          onOutcomeMeetsIdChange={setOutcomeMeetsId}\n          choices={choices}\n          statuses={statuses}\n          feedback={feedbackHandler}\n        />\n        <StrongText>Consequences</StrongText>\n        {consequences.map((str, i) => {\n          return <Text key={i}>{str}</Text>;\n        })}\n        <Flex alignItems={\"flex-end\"} flexWrap={\"wrap\"} mt={\"5px\"}>\n          <ConsequenceInput\n            onChange={setCurrentConsequence}\n            statuses={statuses}\n            feedback={feedbackHandler}\n          />\n          <EndFlexElement>\n            <PrimaryButton onClick={onAddConsequence}>Add</PrimaryButton>\n          </EndFlexElement>\n        </Flex>\n        <br />\n        {showFeedback && <Text color={WARN}>{feedback}</Text>}\n        <PrimaryButton onClick={onSubmit} mr={\"5px\"}>\n          Submit\n        </PrimaryButton>\n      </>\n    );\n  };\n\nexport default AddConsequentialDependentDecisionForm;\n","import React, { useEffect, useState } from \"react\";\nimport Client from \"../../client/client\";\nimport {\n  ApplicationTypes,\n  Choice,\n  Decision,\n  Story,\n  StoryStatus,\n} from \"../../client/types\";\nimport { Box, Flex } from \"rebass\";\nimport { ErrorHandlerProps, Routes } from \"../../App\";\nimport ChoiceCard from \"../../components/choiceCard\";\nimport TitleForm from \"../../forms/titleForm\";\nimport StatusCard from \"../../components/statusCard\";\nimport SoftButton from \"../../components/softButton\";\nimport { ButtonLabel, Header, PageContainer, StoryTitle } from \"../../themes\";\nimport AddStatusForm from \"../../forms/addStatusForm\";\nimport LinkButton from \"../../components/linkButton\";\nimport { ACTION_BUTTON_MARGIN, SECONDARY } from \"../../themes\";\nimport ExportForm from \"../../forms/exportForm\";\nimport SetInitialChoiceForm from \"../../forms/setInitialChoiceForm\";\n\nenum SwitchFormTypes {\n  ADD_STATUS,\n  SET_INITIAL,\n  NONE,\n}\n\nconst noStory: Story = {\n  name: \"\",\n  statuses: [],\n  choices: [],\n  decisions: [],\n  choice: -1,\n};\n\nconst WorkEditor: React.FC<ErrorHandlerProps> = ({ message }) => {\n  const [workName, setWorkName] = useState<string>();\n  const [work, setWork] = useState<Story>(noStory);\n  const [noWorkMessage, setNoWorkMessage] = useState(\"Loading...\");\n  const [currentForm, setCurrentForm] = useState<SwitchFormTypes>(\n    SwitchFormTypes.NONE\n  );\n  // Export Work Form\n  const [exportVisible, setExportVisible] = useState(false);\n\n  useEffect(() => {\n    const handleQuit = (): void => {\n      Client.quitWork().then(() => {}, message.errorAlert);\n    };\n\n    window.addEventListener(\"unload\", handleQuit);\n    return () => window.removeEventListener(\"unload\", handleQuit);\n  });\n\n  useEffect(() => {\n    const handleLoaded = (res: Story): void => {\n      if (res.name !== \"\") {\n        setWork(res);\n        Client.getCurrentWorkName().then(\n          (res: string) => setWorkName(res),\n          message.errorAlert\n        );\n      } else {\n        setWorkName(undefined);\n        setNoWorkMessage(\n          \"Oops! Looks like you haven't loaded a story to edit!\"\n        );\n      }\n    };\n\n    Client.getCurrentWork().then(handleLoaded, message.errorAlert);\n  }, [message]);\n\n  const getCurrentWork = (): void => {\n    Client.getCurrentWork().then(\n      (res: Story) => setWork(res),\n      message.errorAlert\n    );\n  };\n\n  const updateStatuses = (): void => {\n    Client.getCurrentStatuses().then(\n      (res: StoryStatus[]) =>\n        setWork((prev) => {\n          return {\n            name: prev.name,\n            statuses: res,\n            choices: prev.choices,\n            decisions: prev.decisions,\n            choice: prev.choice,\n          };\n        }),\n      message.errorAlert\n    );\n    setCurrentForm(SwitchFormTypes.NONE);\n  };\n\n  const updateInitialChoice = (): void => {\n    Client.getInitialChoice().then(\n      (res: number) =>\n        setWork((prev) => {\n          return {\n            name: prev.name,\n            statuses: prev.statuses,\n            choices: prev.choices,\n            decisions: prev.decisions,\n            choice: res,\n          };\n        }),\n      message.errorAlert\n    );\n    setCurrentForm(SwitchFormTypes.NONE);\n  };\n\n  const updateChoicesAndDecisions = (): void => {\n    Client.getCurrentChoices().then((res: Choice[]) => {\n      Client.getCurrentDecisions().then((dRes: Decision[]) => {\n        setWork((prev) => {\n          return {\n            name: prev.name,\n            statuses: prev.statuses,\n            choices: res,\n            decisions: dRes,\n            choice: prev.choice,\n          };\n        });\n      }, message.errorAlert);\n    }, message.errorAlert);\n    setCurrentForm(SwitchFormTypes.NONE);\n  };\n\n  const exportToPlayer = (): void => {\n    Client.exportToPlayer().then(\n      () => message.triggerMessage(\"Successfully exported!\"),\n      message.errorAlert\n    );\n  };\n\n  const onClickExport = (): void => {\n    setExportVisible(true);\n  };\n\n  const onExportSuccess = (): void => {\n    message.triggerMessage(\"Exported successfully!\");\n    setExportVisible(false);\n  };\n\n  const onAddChoice = (): void => {\n    Client.addChoice().then(updateChoicesAndDecisions, message.errorAlert);\n  };\n\n  if (!workName) {\n    return (\n      <PageContainer>\n        <StoryTitle>{noWorkMessage}</StoryTitle>\n        <LinkButton to={Routes.WRITER_LIBRARY} bg={SECONDARY}>\n          <ButtonLabel>Go back to your library!</ButtonLabel>\n        </LinkButton>\n      </PageContainer>\n    );\n  } else {\n    return (\n      <PageContainer>\n        <StoryTitle>Story Editor</StoryTitle>\n        <Header>Work: {workName}</Header>\n        <TitleForm\n          title={work.name}\n          message={message}\n          onFinish={getCurrentWork}\n        />\n        <Header>Statuses</Header>\n        <Flex flexWrap={\"wrap\"}>\n          {work.statuses.map((status: StoryStatus) => {\n            return (\n              <StatusCard\n                key={status.name}\n                status={status}\n                updateStory={updateStatuses}\n                message={message}\n              />\n            );\n          })}\n        </Flex>\n\n        <Header>Choices</Header>\n        <Flex flexWrap={\"wrap\"}>\n          {work.choices.map((choice: Choice) => {\n            return (\n              <ChoiceCard\n                key={choice.id}\n                choice={choice}\n                choices={work.choices}\n                decisions={work.decisions}\n                statuses={work.statuses}\n                onSuccess={updateChoicesAndDecisions}\n                message={message}\n              />\n            );\n          })}\n        </Flex>\n        <Header>Initial Choice: {work.choice}</Header>\n\n        <Header>Edit</Header>\n        <Box>\n          {(() => {\n            switch (currentForm) {\n              case SwitchFormTypes.ADD_STATUS:\n                return (\n                  <>\n                    <Header>Add Status</Header>\n                    <AddStatusForm onSuccess={updateStatuses} />\n                  </>\n                );\n              case SwitchFormTypes.SET_INITIAL:\n                return (\n                  <>\n                    <Header>Set Initial Choice</Header>\n                    <SetInitialChoiceForm\n                      choices={work.choices}\n                      onSuccess={updateInitialChoice}\n                      message={message}\n                    />\n                  </>\n                );\n              case SwitchFormTypes.NONE:\n              default:\n                return (\n                  <>\n                    <SoftButton\n                      text={\"Add Status\"}\n                      margin={ACTION_BUTTON_MARGIN}\n                      onClick={() => setCurrentForm(SwitchFormTypes.ADD_STATUS)}\n                    />\n                    <SoftButton\n                      text={\"Add Choice\"}\n                      margin={ACTION_BUTTON_MARGIN}\n                      onClick={onAddChoice}\n                    />\n                    <SoftButton\n                      text={\"Set Initial Choice\"}\n                      margin={ACTION_BUTTON_MARGIN}\n                      onClick={() =>\n                        setCurrentForm(SwitchFormTypes.SET_INITIAL)\n                      }\n                    />\n                  </>\n                );\n            }\n          })()}\n          {currentForm !== SwitchFormTypes.NONE && (\n            <SoftButton\n              text={\"Cancel\"}\n              onClick={() => setCurrentForm(SwitchFormTypes.NONE)}\n            />\n          )}\n        </Box>\n        <Header>Export</Header>\n        {!exportVisible ? (\n          <Flex>\n            <SoftButton\n              text={\"Export\"}\n              onClick={onClickExport}\n              margin={ACTION_BUTTON_MARGIN}\n            />\n            <SoftButton\n              text={\"Export to Player\"}\n              onClick={exportToPlayer}\n              margin={ACTION_BUTTON_MARGIN}\n            />\n          </Flex>\n        ) : (\n          <Box mr={\"10px\"} width={\"70%\"}>\n            <ExportForm\n              name={workName}\n              onSuccess={onExportSuccess}\n              exportType={ApplicationTypes.WORK}\n            />\n            <SoftButton\n              text={\"Cancel\"}\n              onClick={() => setExportVisible(false)}\n              margin={\"10px 0 0 0\"}\n            />\n          </Box>\n        )}\n      </PageContainer>\n    );\n  }\n};\n\nexport default WorkEditor;\n","import React, { useState } from \"react\";\nimport Client from \"../../client/client\";\nimport styled from \"@emotion/styled\";\nimport { ErrorHandlerProps } from \"../../App\";\nimport { Input } from \"@rebass/forms\";\nimport SoftButton from \"../../components/softButton\";\nimport { Header, PrimaryButton } from \"../../themes\";\n\nconst InlineSoftButton = styled(SoftButton)`\n  display: inline-block;\n`;\n\ninterface TitleFormProps extends ErrorHandlerProps {\n  readonly title: string;\n  readonly onFinish: () => void;\n}\n\nconst TitleForm: React.FC<TitleFormProps> = ({ message, title, onFinish }) => {\n  const [editing, setEditing] = useState(false);\n  const [titleRequest, setTitleRequest] = useState<string>(title);\n\n  const editTitle = (): void => {\n    Client.setName(titleRequest).then(() => {\n      onFinish();\n      setEditing(false);\n    }, message.errorAlert);\n  };\n\n  const toggleEditing = (): void => {\n    setEditing((prev) => !prev);\n  };\n\n  return (\n    <>\n      <Header display={\"inline-block\"} mr={\"15px\"}>\n        Story Title:\n      </Header>\n      {editing ? (\n        <>\n          <Input\n            name={\"name\"}\n            defaultValue={title}\n            placeholder={`Untitled`}\n            display={\"inline-block\"}\n            width={\"40%\"}\n            onChange={(e) => setTitleRequest(e.target.value)}\n          />\n          <PrimaryButton\n            onClick={editTitle}\n            display={\"inline-block\"}\n            ml={\"15px\"}\n            mr={\"8px\"}\n          >\n            Submit\n          </PrimaryButton>\n        </>\n      ) : (\n        <Header display={\"inline-block\"} mr={\"15px\"}>\n          {title}\n        </Header>\n      )}\n      <InlineSoftButton\n        onClick={toggleEditing}\n        text={editing ? \"Cancel\" : \"Change Title\"}\n      />\n    </>\n  );\n};\n\nexport default TitleForm;\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport { Input } from \"@rebass/forms\";\nimport Client from \"../../client/client\";\nimport { Text } from \"rebass\";\nimport { WARN } from \"../../themes\";\nimport { validateInteger } from \"../utils\";\nimport { ErrorResponse } from \"../../client/types\";\nimport { PrimaryButton } from \"../../themes\";\n\ninterface AddStatusFormProps {\n  readonly updateName?: string;\n  readonly onSuccess: () => void;\n}\n\nconst AddStatusForm: React.FC<AddStatusFormProps> = ({\n  updateName,\n  onSuccess,\n}) => {\n  const [name, setName] = useState<string>();\n  const [val, setVal] = useState<number>(0);\n  // Feedback\n  const [feedback, setFeedback] = useState<string>();\n  const [showFeedback, setShowFeedback] = useState<boolean>();\n\n  useEffect(() => {\n    if (updateName) {\n      setName(updateName);\n    }\n  }, [updateName]);\n\n  const triggerFeedback = (msg: string) => {\n    setFeedback(msg);\n    setShowFeedback(true);\n  };\n\n  const showIntegerError = (): void => {\n    triggerFeedback(\"Must be an integer!\");\n  };\n\n  const changeVal = (val: number): void => {\n    setShowFeedback(false);\n    setVal(val);\n  };\n\n  const onValInputChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    validateInteger(e, showIntegerError, changeVal);\n  };\n\n  const onAdd = (): void => {\n    if (name) {\n      Client.addStatus(name, val).then(onSuccess, (err: ErrorResponse) =>\n        triggerFeedback(err.message)\n      );\n    } else {\n      triggerFeedback(\"All fields are required!\");\n    }\n  };\n\n  return (\n    <>\n      {!updateName && (\n        <Input\n          name={\"name\"}\n          placeholder={\"Status Name\"}\n          onChange={(e) => setName(e.target.value)}\n          mb={\"7px\"}\n        />\n      )}\n      <Input\n        name={\"val\"}\n        defaultValue={0}\n        placeholder={\"0\"}\n        type={\"number\"}\n        onChange={onValInputChange}\n        mb={\"7px\"}\n      />\n      {showFeedback && <Text color={WARN}>{feedback}</Text>}\n      <PrimaryButton onClick={onAdd} mr={\"5px\"}>\n        Submit\n      </PrimaryButton>\n    </>\n  );\n};\n\nexport default AddStatusForm;\n","import React, { useState } from \"react\";\nimport { Box, Button, Text } from \"rebass\";\nimport { StoryStatus } from \"../../client/types\";\nimport BoxCard from \"../boxCard\";\nimport { ErrorHandlerProps } from \"../../App\";\nimport SoftButton from \"../softButton\";\nimport Client from \"../../client/client\";\nimport AddStatusForm from \"../../forms/addStatusForm\";\nimport { WARN } from \"../../themes\";\nimport Modal from \"../modal\";\nimport {\n  BottomCornerFlex,\n  FormContainer,\n  Header,\n  StrongText,\n} from \"../../themes\";\n\ninterface StatusCardProps extends ErrorHandlerProps {\n  readonly status: StoryStatus;\n  readonly updateStory: () => void;\n}\n\nconst StatusCard: React.FC<StatusCardProps> = ({\n  status,\n  updateStory,\n  message,\n}) => {\n  const [editing, setEditing] = useState(false);\n\n  const onClickRemove = (): void => {\n    Client.removeStatus(status.name).then(null, message.errorAlert);\n  };\n\n  return (\n    <>\n      <BoxCard title={status.name}>\n        <Text>Initial Value: {status.value}</Text>\n        <Box textAlign={\"right\"} mt={\"15px\"} mb={\"-10px\"}>\n          <SoftButton text={\"Edit\"} onClick={() => setEditing(true)} />\n        </Box>\n      </BoxCard>\n\n      <Modal visible={editing} onClose={() => setEditing(false)}>\n        <FormContainer>\n          <Header>Update Status: {status.name}</Header>\n          <StrongText my={\"10px\"}>Update Initial Value</StrongText>\n          <AddStatusForm updateName={status.name} onSuccess={updateStory} />\n          <br />\n          <BottomCornerFlex>\n            <Button onClick={onClickRemove} bg={WARN}>\n              Remove Status\n            </Button>\n          </BottomCornerFlex>\n        </FormContainer>\n      </Modal>\n    </>\n  );\n};\n\nexport default StatusCard;\n","import React, { ChangeEvent, useState } from \"react\";\nimport { ErrorHandlerProps } from \"../../App\";\nimport Client from \"../../client/client\";\nimport { Select } from \"@rebass/forms\";\nimport { Choice } from \"../../client/types\";\nimport { PrimaryButton, StrongText } from \"../../themes\";\nimport { Flex, Text } from \"rebass\";\n\ninterface SetInitialChoiceFormProps extends ErrorHandlerProps {\n  readonly choices: Choice[];\n  readonly onSuccess: () => void;\n}\n\nconst SetInitialChoiceForm: React.FC<SetInitialChoiceFormProps> = ({\n  choices,\n  onSuccess,\n  message,\n}) => {\n  const [choice, setChoice] = useState(-1);\n\n  const onChoiceSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n    setChoice(Number(e.currentTarget.value));\n  };\n\n  const onSetInitial = (): void => {\n    Client.setInitial(choice).then(onSuccess, message.errorAlert);\n  };\n\n  return (\n    <>\n      <StrongText>Initial Choice</StrongText>\n      <Flex alignItems={\"center\"}>\n        <Text mr={\"5px\"}>Choice #</Text>\n        <Select\n          name=\"choice\"\n          onChange={onChoiceSelect}\n          my={\"5px\"}\n          minWidth={\"50px\"}\n        >\n          {choices.map((choice) => (\n            <option key={choice.id}>{choice.id}</option>\n          ))}\n        </Select>\n      </Flex>\n      <PrimaryButton onClick={onSetInitial} mr={\"5px\"}>\n        Set Initial Choice\n      </PrimaryButton>\n    </>\n  );\n};\n\nexport default SetInitialChoiceForm;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Player from \"./pages/player\";\nimport NavBar from \"./components/navBar\";\nimport Home from \"./pages/home\";\nimport Alert, { AlertMessage } from \"./components/alert\";\nimport Writer from \"./pages/writer\";\nimport styled from \"@emotion/styled\";\nimport { Box } from \"rebass\";\nimport { ErrorResponse } from \"./client/types\";\nimport WorkEditor from \"./pages/workEditor\";\nimport StoryPlayer from \"./pages/storyPlayer\";\n\nconst Top = styled(Box)`\n  position: absolute;\n  top: 20px;\n  left: 50%;\n  transform: translate(-50%, 0);\n  z-index: 4;\n`;\n\nexport enum Routes {\n  HOME = \"/\",\n  PLAYER_LIBRARY = \"/player\",\n  WRITER_LIBRARY = \"/writer\",\n  PLAYER_PLAY = \"/player/play\",\n  WRITER_EDIT = \"/writer/edit\",\n}\n\nexport interface Messenger {\n  readonly triggerMessage: (message: string) => void;\n  readonly triggerAlert: (message: string) => void;\n  readonly errorAlert: (err: ErrorResponse) => void;\n}\n\nexport interface ErrorHandlerProps {\n  readonly message: Messenger;\n}\n\nconst ghPagesDisclaimer: AlertMessage = {\n  visible: true,\n  message:\n    \"This is a demo hosted on Github Pages. Some features are not supported. Please do not reload any pages.\",\n  warn: false,\n};\n\nfunction App() {\n  // Alerts\n  const [alerts, setAlerts] = useState<AlertMessage[]>([ghPagesDisclaimer]);\n\n  const triggerMessage = (message: string): void => {\n    setAlerts((prev) => [\n      ...prev,\n      { visible: true, message: message, warn: false },\n    ]);\n    if (alerts.length > 5) {\n      deleteAlert(0);\n    }\n  };\n\n  const triggerAlert = (message: string): void => {\n    setAlerts((prev) => [\n      ...prev,\n      { visible: true, message: message, warn: true },\n    ]);\n    if (alerts.length > 5) {\n      deleteAlert(0);\n    }\n  };\n\n  const errorAlert = (err: ErrorResponse): void => {\n    triggerAlert(err.message);\n  };\n\n  const message: Messenger = {\n    triggerMessage,\n    triggerAlert,\n    errorAlert,\n  };\n\n  const deleteAlert = (i: number): void => {\n    const copyAlerts = [...alerts];\n    copyAlerts.splice(i, 1);\n    setAlerts(copyAlerts);\n  };\n\n  return (\n    <>\n      <Router basename={process.env.PUBLIC_URL}>\n        <NavBar />\n        <Switch>\n          <Route path={Routes.HOME} exact>\n            <Home message={message} />\n          </Route>\n          <Route path={Routes.PLAYER_LIBRARY} exact>\n            <Player message={message} />\n          </Route>\n          <Route path={Routes.WRITER_LIBRARY} exact>\n            <Writer message={message} />\n          </Route>\n          <Route path={Routes.PLAYER_PLAY} exact>\n            <StoryPlayer message={message} />\n          </Route>\n          <Route path={Routes.WRITER_EDIT} exact>\n            <WorkEditor message={message} />\n          </Route>\n        </Switch>\n      </Router>\n\n      <Top>\n        {alerts.map((alert, i) => {\n          return (\n            <Alert\n              key={i}\n              visible={alert.visible}\n              message={alert.message}\n              warn={alert.warn}\n              onClose={() => deleteAlert(i)}\n            />\n          );\n        })}\n      </Top>\n    </>\n  );\n}\n\nexport default App;\n","import React, { useEffect, useState } from \"react\";\nimport Client from \"../../client/client\";\nimport { Option, Story } from \"../../client/types\";\nimport { Button, Flex, Text } from \"rebass\";\nimport styled from \"@emotion/styled\";\nimport { WARN } from \"../../themes\";\nimport { ErrorHandlerProps } from \"../../App\";\nimport {\n  BottomFlex,\n  FooterPageContainer,\n  PrimaryButton,\n  StoryTitle,\n} from \"../../themes\";\n\nconst ScriptText = styled(Text)`\n  font-size: 16px;\n  line-height: 22px;\n`;\n\nconst DecisionText = styled(ScriptText)`\n  padding-left: 20px;\n  padding-bottom: 5px;\n`;\n\nconst StoryPlayer: React.FC<ErrorHandlerProps> = ({ message }) => {\n  const [story, setStory] = useState<Story>();\n  const [prevChoices, setPrevChoices] = useState<string[]>([]);\n  const [prevDecisions, setPrevDecisions] = useState<string[]>([]);\n  const [noStoryMessage, setNoStoryMessage] = useState(\"Loading...\");\n\n  useEffect(() => {\n    const handleQuit = (): void => {\n      Client.quitStory().then(() => {}, message.errorAlert);\n    };\n\n    window.addEventListener(\"unload\", handleQuit);\n    return () => window.removeEventListener(\"unload\", handleQuit);\n  });\n\n  useEffect(() => {\n    const effectGetCurrentDescription = (): void => {\n      Client.getCurrentChoice().then(\n        (res) => setPrevChoices((prev) => [...prev, res]),\n        message.errorAlert\n      );\n    };\n\n    const handleLoaded = (res: Story) => {\n      if (res.name !== \"\") {\n        setStory(res);\n        if (prevChoices.length === 0) {\n          effectGetCurrentDescription();\n        }\n      } else {\n        setNoStoryMessage(\n          \"Oops! Looks like this story doesn't exist. Load a story from your library!\"\n        );\n      }\n    };\n\n    Client.getCurrentStory().then(handleLoaded, message.errorAlert);\n  }, [message, prevChoices.length]);\n\n  const getCurrentStory = (): void => {\n    Client.getCurrentStory().then((res) => setStory(res), message.errorAlert);\n  };\n\n  const getCurrentDescription = (): void => {\n    Client.getCurrentChoice().then(\n      (res) => setPrevChoices((prev) => [...prev, res]),\n      message.errorAlert\n    );\n  };\n\n  const choose = (decision: number): void => {\n    if (story) {\n      setPrevDecisions((prev) => [\n        ...prev,\n        story.decisions[decision].description,\n      ]);\n      Client.choose(decision).then(getCurrentStory, message.errorAlert);\n      getCurrentDescription();\n    }\n  };\n\n  const onRestart = (): void => {\n    const afterRestart = (): void => {\n      getCurrentStory();\n      setPrevDecisions((prev) => [...prev, \"Restarted the story\"]);\n      getCurrentDescription();\n    };\n    Client.restart().then(afterRestart, message.errorAlert);\n  };\n\n  return (\n    <FooterPageContainer>\n      {(() => {\n        switch (story) {\n          case undefined:\n            return <StoryTitle>{noStoryMessage}</StoryTitle>;\n          default:\n            const storyOptions: Option[] = story.choices[story.choice].options;\n            return (\n              <>\n                <StoryTitle>{story.name}</StoryTitle>\n                {prevChoices.map((str, i) => {\n                  return (\n                    <div key={str + i}>\n                      <ScriptText>{str}</ScriptText>\n                      {i < prevDecisions.length && (\n                        <DecisionText>Chose: {prevDecisions[i]}</DecisionText>\n                      )}\n                    </div>\n                  );\n                })}\n                {storyOptions.length > 0 && (\n                  <Flex mt={10}>\n                    <ScriptText my={\"auto\"} mr={10}>\n                      Choose:{\" \"}\n                    </ScriptText>\n                    {story &&\n                      story.choices[story.choice].options.map((opt) => {\n                        return (\n                          <PrimaryButton\n                            key={opt.id}\n                            onClick={() => choose(opt.decision)}\n                            mr={\"10px\"}\n                          >\n                            {story.decisions[opt.decision].description}\n                          </PrimaryButton>\n                        );\n                      })}\n                  </Flex>\n                )}\n              </>\n            );\n        }\n      })()}\n\n      <BottomFlex>\n        <Button onClick={onRestart} padding={\"15px 25px\"} bg={WARN}>\n          Start Over\n        </Button>\n      </BottomFlex>\n    </FooterPageContainer>\n  );\n};\n\nexport default StoryPlayer;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}